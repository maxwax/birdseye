#!/bin/bash

#
# nics - simple script to summarize available network devices
#
# 2013 Maxwell Spangler maxwell@maxwellspangler.com
#

# Standard function to show the user our syntax
function usage {
	echo "nics"
	echo
	echo "Syntax: nics <option>"
	echo
	echo "Options:"
	echo
	echo "-s -short   Output basic summary (less than 80 chars wide, default)"
	echo "-t -traffic Output basic plus traffic information"
	echo "-6 -ipv6    Output basic plus traffic plus ipv6 addresses"
	echo

}

# default style is 'short'
NIC_SUMMARY_STYLE="short"

# Process command line arguments
while [ "$1" != "" ]
do
	case $1 in

		# Default, output limited to < 80 characters wide
		-s | "--short" )
			shift
			NIC_SUMMARY_STYLE="short";;

		# Wider, shows per device traffic summary
		-t | "--traffic" )
			shift
			NIC_SUMMARY_STYLE="traffic";;

		# Wider still, shows ipv6 addresses 
		-6 | "--ipv6" )
			shift
			NIC_SUMMARY_STYLE="ipv6";;

		# I don't know what I want! Help me!
		-h | --help | --syntax | *)
			usage
			exit 0;;

	esac
done

# Print the header for our summary table
case $NIC_SUMMARY_STYLE in 
	"short") 
		printf "%12s %17s %8s %18s %7s %9s\n" \
			"INTERFACE" "MAC ADDRESS" "LINK" "IP ADDRESS" "MTU" ;;
	"traffic") 
		printf "%12s %17s %8s %18s %7s %9s %8s %-3s %8s %-3s\n" \
			"INTERFACE" "MAC ADDRESS" "LINK" "IP ADDRESS" "MTU" "WIRE SPD" "" "RX" "" "TX";;
	"ipv6") 
		printf "%12s %17s %8s %18s %40s %8s %9s %8s %-3s %8s %-3s\n" \
			"INTERFACE" "MAC ADDRESS" "LINK" "IP ADDRESS" "IP6 ADDRESS" "MTU" "WIRE SPD" "" "RX" "" "TX";;
esac

# FIND A LIST OF NETWORK DEVICES:
# 1: ip link list - lists all network devices
# 2: Use only the first line using a regex that looks for '1:', '99:', etc
# 3: From that first line, we only want the device name which is param #2
# 4: remove the colon that sits to the right of the device name
# 5: macvtap bridges (used with KVM) look like this:
#    macvtap0@p10p1
#    convert the "@" symbol to ATSYMBOL and then we'll use a bash
#    parameter expansion below to remove everything to the right of ATSYMBOL

for EACH_NIC in $(ip link list | grep -e "[0-9]: " | awk -F " " '{print $2}' | sed "s/://g" | sed "s/@/ATSYMBOL/" )
do

	# If ATSYMBOL is present, remove everything to right of it so we have
	# just a simple name like macvtap0
	EACH_NIC=${EACH_NIC%%ATSYMBOL*}

	# If we're anything but the software-only loopback device, try to find the
	# hardware MAC address this device
	if [[ $EACH_NIC != "lo" ]]
	then

		# 1: Use 'ip link show' to find addresses for this device
		# 2: We only care about the link/ether line for our information
		# 3: Return the second parameter of this line which is the MAC address
		MAC_ADDRESS=$(ip address show $EACH_NIC | grep -F "link/ether" | awk '{FS=" "; print $2}')

		# If it's not set, make it blank.
		MAC_ADDRESS=${MAC_ADDRESS:-" "}
	else
		# If we're a loopback device, ignore the need for a MAC address
		MAC_ADDRESS="none"
	fi

	# Is the link up or down or something else?
	# 1: Use 'ip link show' to show link status of this device
	# 2: We only want the first line of output which has a number: value on it
	# 3: The ninth parameter should be our link state
	# Great opportunity for perl/python regex handling instead of parameter #s
	LINK_STATE=$( ip link show $EACH_NIC | grep -e "[0-9]: " | awk '{FS=" "; print $9}')

	# If it's not set, make it blank.
	LINK_STATE=${LINK_STATE:-" "}

	# Uppercase results are cold and boring: let's make them friendly with lowercase
	# Anything that's not up/down/unknown gets presented literally because
	# it's unusual and we don't want to filter it.
	case $LINK_STATE in
		"UP") LINK_STATE="up";;
		"DOWN") LINK_STATE="down";;
		"UNKNOWN") LINK_STATE="unknown";;
	esac

	# DETERMINE IP ADDRESS of this port
	# 1: Use 'ip addr show' to get address information for this device
	# 2: Only look for lines that contain 'inet ' (they have address info)
	# 3: We only want the primary address so take the first line only
	# 4: Return the second parameter of this line which is our IP address
	IP_ADDRESS=$(ip addr show $EACH_NIC | grep "inet " | head -1 | awk '{FS=" ";print $2}')

	# If it's not set, make it blank.
	IP_ADDRESS=${IP_ADDRESS:-"none"}

	# DETERMINE IP6 ADDRESS of this port
	# 1: Use 'ip addr show' to get address information for this device
	# 2: Only look for lines that contain 'inet6 ' (they have ipv6 address info)
	# 3: Only pay attention to 'global' lines which is external ipv6 addresses??
	# 4: We only want the primary address so take the first line only
	# 5: Return the second parameter of this line which is our IP address
	# NOT SURE ABOUT THE GLOBAL CHECK! 2013.1016 maxwell
	# NOT SURE ABOUT THE GLOBAL CHECK! 2013.1016 maxwell
	IP6_ADDRESS=$(ip addr show $EACH_NIC | grep "inet6 " | grep global | head -1 | awk '{FS=" ";print $2}')

	# If it's not set, make it blank.
	IP6_ADDRESS=${IP6_ADDRESS:-"none"}

	# DETERMINE THE MTU of this port
	# 1: Use 'ip link show' to get device information
	# 2: Only look for lines containing port names at their front [0-9]:
	# 3: Return the 5th parameter which is the MTU value
	MTU=$( ip link show $EACH_NIC | grep -e "[0-9]: " | awk '{FS=" "; print $5}')

	# If it's not set, make it blank.
	MTU=${MTU:-"none"}

	# The position of our statistics varies based on whether or not
	# the 'ip' command includes a 'mode' attribute and its value.
	# Let's check to see if it's there and we'll use it for RX and TX data
	MODE_CHECK=$(ip link show $EACH_NIC | grep -F " mode " | wc -l)

	if [[ $MODE_CHECK -eq 1 ]]
	then
		# We have a 'mode' parameter so use 26/27 for our values
		let RX_BYTES=$(ip -o -s link show $EACH_NIC | awk '{FS=" "; print $26}')
		let RX_PACKETS=$(ip -o -s link show $EACH_NIC | awk '{FS=" "; print $27}')
	else
		# We do not have a 'mode' parameter so use 24/25 for our values
		let RX_BYTES=$(ip -o -s link show $EACH_NIC | awk '{FS=" "; print $24}')
		let RX_PACKETS=$(ip -o -s link show $EACH_NIC | awk '{FS=" "; print $25}')
	fi

	# If these weren't set correctly, set them to numeric 0
	RX_BYTES=${RX_BYTES:-"0"}
	RX_PACKETS=${RX_PACKETS:-"0"}

	# Calculate the traffic in MiB and GiB
	let RX_MIB=( RX_BYTES / 1048576)
	let RX_GIB=( RX_BYTES / 1073741824)

	# Default the human readable size we'll report to " "
	RX_HUMAN=" "

	# If we have 1 or more gigabytes, let's use that.
	if [[ $RX_GIB > 1 ]]
	then
		RX_HUMAN="${RX_GIB}"
		RX_HUMAN_TYPE="GiB"
	# Less than 1 gigabyte but more than 1 megabyte, we'll use megabytes
	elif [[ $RX_MIB > 1 ]]
	then
		RX_HUMAN="${RX_MIB}"
		RX_HUMAN_TYPE="MiB"
	# Less than a megabyte? show the raw byte value
	else
		RX_HUMAN="${RX_BYTES}"
		RX_HUMAN_TYPE="B"
	fi

	# Use the MODE_CHECK value above to figure out the position of transmit data
	if [[ $MODE_CHECK -eq 1 ]]
	then
		let TX_BYTES=$(ip -o -s link show $EACH_NIC | awk '{FS=" "; print $41}')
		let TX_PACKETS=$(ip -o -s link show $EACH_NIC | awk '{FS=" "; print $42}')
	else
		let TX_BYTES=$(ip -o -s link show $EACH_NIC | awk '{FS=" "; print $39}')
		let TX_PACKETS=$(ip -o -s link show $EACH_NIC | awk '{FS=" "; print $40}')
	fi

	# If these weren't set correctly, set them to numeric 0
	TX_BYTES=${TX_BYTES:-"0"}
	TX_PACKETS=${TX_PACKETS:-"0"}

	# Calculate the traffic in MiB and GiB
	let TX_MIB=( TX_BYTES / 1048576)
	let TX_GIB=( TX_BYTES / 1073741824)

	# Default the human readable size we'll report to " "
	TX_HUMAN=" "
	# If we have 1 or more gigabytes, let's use that.
	if [[ $TX_GIB > 1 ]]
	then
		TX_HUMAN="${TX_GIB}"
		TX_HUMAN_TYPE="GiB"
	# Less than 1 gigabyte but more than 1 megabyte, we'll use megabytes
	elif [[ $TX_MIB > 1 ]]
	then
		TX_HUMAN="${TX_MIB}"
		TX_HUMAN_TYPE="MiB"
	# Less than a megabyte? show the raw byte value
	else
		TX_HUMAN="${TX_BYTES}"
		TX_HUMAN_TYPE="B"
	fi

	# We need ethtool to show the link speed and we won't always have this.
	# So default to Unknown
	WIRE_SPEED="Unknown"

	# Attempt to run 'ethtool' to see if it reports an error
	# Do we have it installed? Does it operate properly?
	ethtool $EACH_NIC > /dev/null 2>&1

	# Do we have an error?
	if (( $? == 0 ))
	then
		# No error, try to run ethtool and get the line we need
		# 1: Use 'ethtool' on our deviec
		# 2: Look for the 'Speed' line which contains our wire link speed
		# 3: Return the second parameter which is our wire link speed
		WIRE_SPEED=$( ethtool $EACH_NIC 2>&1 | grep Speed | awk '{FS=":"; print $2}')
		WIRE_SPEED=${WIRE_SPEED:-"-"}
	fi

	# Report this network device's details to the user
	case $NIC_SUMMARY_STYLE in 
		"short") 
			printf "%12s %17s %8s %18s %7s %9s\n" \
						$EACH_NIC $MAC_ADDRESS $LINK_STATE $IP_ADDRESS $MTU $WIRE_SPEED;;
		"traffic") 
			printf "%12s %17s %8s %18s %7s %9s %8s %-3s %8s %-3s\n" \
						$EACH_NIC $MAC_ADDRESS $LINK_STATE $IP_ADDRESS $MTU $WIRE_SPEED $RX_HUMAN $RX_HUMAN_TYPE $TX_HUMAN $TX_HUMAN_TYPE;;
		"ipv6") 
			printf "%12s %17s %8s %18s %40s %8s %9s %8s %-3s %8s %-3s\n" \
						$EACH_NIC $MAC_ADDRESS $LINK_STATE $IP_ADDRESS $IP6_ADDRESS $MTU $WIRE_SPEED $RX_HUMAN $RX_HUMAN_TYPE $TX_HUMAN $TX_HUMAN_TYPE;;
	esac

done
