#!/bin/bash
#
# birdseye
#
# 2013 Maxwell Spangler, maxwell@maxwellspangler.com
#
# Birdseye creates a simple, well-presented HTML based report of a Linux
# systems hardware, software and configuration details.
# See http://www.maxwellspangler.com/linux/birdseye for more information.

# Version number set here: date produced plus a daily sequence version
VERSION="2013.1012.01"

# Bash variable UID returns the user id # of the user
# Running as root, or running this script using sudo should return user 0
if [ $UID != 0 ]
then
	echo "You must be root or use 'sudo' to run birdseye."
	exit 1
fi

###########################################################
#
# TODO LIST
#
###########################################################

# GPL

# UEFI variables 'uefivars -l' - need uefi system for this.

# Shorten display on small output:
# system map
# virsh list --all
# virsh pool-list

# Run on Xen hypervisor host and see what is reported
# Run on Amazon, Rackspace VM and see what is reported

# FQDN on each NIC's IP address. Similar to 'hostname --all-fqdns'

# dmidecode missing on Jason's systems.. Check for it

# Report on chkconfig for RHEL/CentOS
# Report on systemctl for Fedora / RHEL 7
# Report on zypper for SUSE
# Report on dpkg for Debian

# Test on multiple systems
# Sample Alternate CSS outputs
# Cleanup CSS styles
# Populate github site and figure out how to use
# Features from sosreport
# Features from snapshot

# Report on IO scheduler in use. See arch linux ssd for instructions
# cat /sys/block/sdX/queue/scheduler


# More context-aware, friendly network device output. 
# See lshw -class network as an example compared to what we do already

# Add lshw such as lshw --class -network on nics
# RPM package
# Debian Package
# Man page

# Check lsinitrd on Debian systems.. Mohan got a 'no such file' error
# Output files should have user security if made with sudo - Josh
# Tell the user about the -quiet option when prompting them. - JasonF

# Replace calls to 'sutl' with new code:
# sutl cards
# sutl nics
# sutl hbas
# sutl nics (within nicports component)
# Replace calls to 'nic-info' with new code

# Add plugin variables before/after each section

# Testing: Fedora 19/RHEL7 do not have lsb_release

###########################################################
#
# Functions 
#
###########################################################

# Output a string of text to the html file
# with no line break so multiple strings can be placed on one line
function string {
	echo -n -e "${1}" >> $HTML
}

# Output a string of text to the html file
# with a trailing line break for readability
function line {
	echo -e "${1}" >> $HTML
}

# Output a string of text to the html file
# Wrap it in <p> so it can be styled as a line
function paragraph {
	echo -e "<p>${1}</p>" >> $HTML
}

#paragraph "<a href=\"#toc_bootmsgs\">Boot messages</a>"

# Output a section name *for the table of contents*
# with a named anchor ($1) and a text string ($2)
function toc_master {
	echo -e "<p class=toc_master_paragraph><a href=\"${1}\">${2}</a></p>" >> $HTML
}

# Output a section header *for the table of contents* (<h2>)
# with a named anchor ($1) and a text string ($2)
function toc_section {
	echo -e "<h2><a name=\"$1\"><a href=\"$3\">$2</a></a></h2>" >> $HTML
}

# Output a section header *for detail reporting (non-toc!)* (<h2>)
# with a named anchor ($1) and a text string ($2)
function section {
	# Output section information to HTML report file
	echo -e "<h2><a name=\"$1\">$2</a></h2>" >> $HTML
#	echo -e "<h2><a name=\"$1\">$2</a> <a href="#top" class="boxtop">Return to Top</a></h2>" >> $HTML

	# Output name of section to user as status report
	echo "$2"
}

# Output a title that can be used to group one or more related items
# together in a group
function group_title {

	RAW_CMD=${3:-"null"}

	# If a third parameter has been passed, put it in parenthesis
	# without bold 
	if [[ $RAW_CMD != "null" ]]
	then
		echo -e "<h3><a name=\"$1\">$2 <span class=h3_nobold>($3)</span></a> <a href="#top" class="boxtop">Return to Top</a></h3>" >> $HTML
	else
		echo -e "<h3><a name=\"$1\">$2</a> <a href="#top" class="boxtop">Return to Top</a></h3>" >> $HTML
	fi
}

# Output a title for a single item of data being reported
function item_title {

	RAW_CMD=${3:-"null"}

	# If a third parameter has been passed, put it in parenthesis
	# without bold 
	if [[ $RAW_CMD != "null" ]]
	then
		echo -e "<h4><a name=\"$1\">$2 <span class=h4_nobold>($3)</span></a><a href="#top" class="boxtop">Return to Top</a></h4>" >> $HTML
	else
		echo -e "<h4><a name=\"$1\">$2</a><a href="#top" class="boxtop">Return to Top</a></h4>" >> $HTML
	fi
}

# Output a bullet (<li>) entry 
# with a section reference ($1) and a text string ($2)
function list {

	RAW_CMD=${3:-"null"}

	# If a third parameter has been passed, put it in parenthesis
	# without bold 
	if [[ $RAW_CMD != "null" ]]
	then
		echo -e "<li><a href=\"#$1\">$2 <span class=list_nobold>($3)</span></a></li>" >> $HTML
	else
		echo -e "<li><a href=\"#$1\">$2</a></li>" >> $HTML
	fi
}

# Output a simple unordered list tag <ul> with optional class info
function unordered_list_open {
	echo -e "<ul $1>" >> $HTML
}

# Output a simple unordered list tag <ul>
# with optional class info
function unordered_list_close {
	echo -e "</ul>" >> $HTML
}

# Output a simple unordered list tag <ul> with optional class info
function raw_open {
	echo -e "<pre class=\"programlisting\">" >> $HTML
}

# Output a simple unordered list tag <ul> with optional class info
function raw_close {
	echo -e "</pre>" >> $HTML
}

# Output a simple unordered list tag <ul> with optional class info
function textarea_open {
	echo -e "<textarea class=\"raw_textarea\" readonly wrap=hard cols=\"$1\" rows=\"$2\">" >> $HTML
}

# Output a simple unordered list tag <ul> with optional class info
# "</p> afterwards adds a little extra space before the next line
function textarea_close {
	echo -e "</textarea></p>" >> $HTML
}

# Output a simple unordered list tag <ul> with optional class info
function helpful_tip {
	echo -e "<div class=\"tip\">" >> $HTML
	echo -e "<blockquote class=\"tip\">" >> $HTML
	echo -e "$1" >> $HTML
	echo -e "</blockquote>" >> $HTML
	echo -e "</div>" >> $HTML
}

function check_for_program {
	# Use whereis to see if the file exists
	CMD_WHEREIS=$(whereis $1)

	# Remove the name of the program and a colon from the whereis output
	CMD_WHEREIS=${CMD_WHEREIS#"$1:"}

	# The string should be empty if the file is missing
	# The string should have locations for the file if it exists
	if [[ X$CMD_WHEREIS == X ]]
	then
		FILE_EXISTS="no"
	else
		FILE_EXISTS="yes"
	fi
}

# Documentation: check_for_program function (above)
# 1. Set FILE_EXISTS to no
# 2. Call check_for_program with the name of the file you question
# 3. Check value of FILE_EXISTS.  Yes, present, no, missing.

#FILE_EXISTS="no"
#check_for_program lsinitrd
#if [[ $FILE_EXISTS == "yes" ]]
#then
#	echo "lsinitrd exists."
#else
#	echo "lsinitrd is missing."
#fi

########################################################################
#
# Default Variable Handling
#
########################################################################

# BIRDSEYE_ variables listed here are set to default values
# If a config file is found, any or all of these values may be
# overwritten.  Later code references these values regardless
# of whether their values come from these settings or an
# external configuration file.
export BIRDSEYE_TAG=""
export BIRDSEYE_NAME=""
export BIRDSEYE_EMAIL=""
export BIRDSEYE_GROUP=""
export BIRDSEYE_ISSUE=""
export BIRDSEYE_CFG_NOTES=""

export BIRDSEYE_FILENAME_YEAR="yes"
export BIRDSEYE_FILENAME_MONTH="yes"
export BIRDSEYE_FILENAME_TIME="no"
export BIRDSEYE_FILENAME_HOST="no"
export BIRDSEYE_FILENAME_TAG="yes"

export BIRDSEYE_OUTPUT_FORCE="no"
export BIRDSEYE_PUBLIC_REPORT="no"
export BIRDSEYE_PROMPT_USER="yes"
export BIRDSEYE_CSS_FILE="null"
# Nice idea, but we can't attach to another X display.. yet?
export BIRDSEYE_XDISPLAY="null"
export BIRDSEYE_PUBLIC_REPORT="no"

export BIRDSEYE_FQDN="null"
export BIRDSEYE_OOB="null"

# Report on Virtualization Details?
export BIRDSEYE_SHOW_VIRT="yes"

# If a config file exists in the user's home directory, execute
# it to set BIRDSEYE_ variables and perform any user supplied processing
if [ -f $HOME/.birdseye.cfg ]
then
	echo "Using in $HOME/.birdseye.cfg:"
	. $HOME/.birdseye.cfg

	echo "Tag   $BIRDSEYE_TAG"
	echo "Name  $BIRDSEYE_NAME"
	echo "Email $BIRDSEYE_EMAIL"
	echo "Group $BIRDSEYE_GROUP"
	echo "Issue $BIRDSEYE_ISSUE"
	echo "Notes $BIRDSEYE_CFG_NOTES"
	echo
fi

# DEF_ variable are used later in processing the report
# Values are set to one of three sources:
# 1. The 'export BIRDSEYE_' lines above (empty values)
# 2. BIRDSEYE variable definitions in a user's .birdseye.cfg file
# 3. Default values set here
# In most cases, there is no config file, so these defaults are used.

DEF_TAG=${BIRDSEYE_TAG:-"birdseye"}
DEF_NAME=${BIRDSEYE_NAME:-"Not specified"}
DEF_EMAIL=${BIRDSEYE_EMAIL:-"Not specified"}
DEF_GROUP=${BIRDSEYE_GROUP:-"Not specified"}
DEF_ISSUE=${BIRDSEYE_ISSUE:-"Not specified"}
DEF_CFG_NOTES=${BIRDSEYE_CFG_NOTES:-"Not specified"}

DEF_CSS_FILE=${BIRDSEYE_CSS_FILE:-"internal"}
# Nice idea, but we can't attach to another X display.. yet?
DEF_XDISPLAY=${BIRDSEYE_XDISPLAY:-"null"}

DEF_FQDN=${BIRDSEYE_FQDN:-"null"}
if [[ $DEF_FQDN == "null" ]]
then
	DEF_FQDN=$(hostname --fqdn)
fi
DEF_OOB=${BIRDSEYE_OOB:-"null"}

PUBLIC_REPORT=$BIRDSEYE_PUBLIC_REPORT
PROMPT_USER=$BIRDSEYE_PROMPT_USER

# default options for output filename.
# Use options from config file if possible (see above)
FILENAME_YEAR=$BIRDSEYE_FILENAME_YEAR
FILENAME_MONTH=$BIRDSEYE_FILENAME_MONTH
FILENAME_TIME=$BIRDSEYE_FILENAME_TIME
FILENAME_HOST=$BIRDSEYE_FILENAME_HOST
FILENAME_TAG=$BIRDSEYE_FILENAME_TAG

OUTPUT_FORCE=$BIRDSEYE_OUTPUT_FORCE

# Report on Virtualization Details?
DEF_SHOW_VIRT=$BIRDSEYE_SHOW_VIRT

###########################################################
#
# Command Line Syntax
#
###########################################################

# Display syntax
function usage {
	echo "Bird's Eye $VERSION"
	echo
	echo "usage: birdseye <options>"
	echo
	echo "-h --help     Display this syntax information"
	echo
	echo "-p --public   Produce a secure report with no IP network or firewall info."
	echo "-q --quick    Don't prompt the user for tag and title information."
	echo "-d --debug    Enable debugging output."
	echo
	echo "-t --tag      Specify a tag to be included in the filename. 'rhel73' 'vers5hw'"
	echo "-n --name     Specify the name of the user producing this report. 'Lloyd Dobler'"
	echo "-e --email    Specify the email address of the user producing this report."
	echo "-g --group    Specify the group this report is associated with. 'Triage'"
	echo "-i --issue    Specify an issue being investigated. 'Network Fault'"
	echo "   --hwnotes  Specify a note about this hardware config. '1/2 cpus diabled'"
	echo
	echo "-o --oob      Specify a FQDN for this system's out-of-band management NIC"
	echo "-f --fqdn     Specify a FQDN for this system's primary NIC"
	echo
	echo "-c --css      Use an external CSS style file's contents '/home/user/style.css'"
	echo
	echo "   --novirt   Skip the sections related to Virtualization"
	echo
	echo "   --date     Include year and month in filename"
	echo "   --dt       Include year and month and 24-hour time in filename"
	echo
	echo "   --year     Include year in filename"
	echo "   --month    Include month & day in filename"
	echo "   --time     Include 24-hour format time in filename"
	echo "   --host     Include system's hostname in filename"
	echo "   --notag    Do not include report tag in filename (Default: include)"
	echo "   --force    Overwrite an existing output directory if it exists."
	echo
}

###########################################################
#
# Command Line Options Processing
#
###########################################################

while [ "$1" != "" ]
do

	# Process the next command line argument
	case $1 in 

		# Examine $1 for a command line parameter
		# If the parameter is identified set a value to be used later
		# If the parameter requires an option, 'shift' so $1 is the option
		# Process the option
		# After this case block, shift again so the next parameter is $1

		# enable debugging output
		-d | --debug )
			DEBUG="yes";;

		# produce a report without IP and firewall information 
		# that might lead to intrusion
		-p | --public )
			PUBLIC_REPORT="yes";;

		# don't prompt the user for information, just run it using defaults
		-q | --quick )
			PROMPT_USER="no";;

		# Include 24-hour format time in output filename
		--time )
			FILENAME_TIME="yes";;

		# Same as --month and --year : include date - convenience
		--date )
			FILENAME_YEAR="yes"
			FILENAME_MONTH="yes";;

		# Same as --month and --year : include date - convenience
		--dt )
			FILENAME_TIME="yes"
			FILENAME_YEAR="yes"
			FILENAME_MONTH="yes";;

		# Include YYYY format date in output filename
		--year )
			FILENAME_YEAR="yes";;

		# Include MMDD format date in output filename
		--month )
			FILENAME_MONTH="yes";;

		# Include hostname in output filename
		--host )
			FILENAME_HOST="yes";;

		# Don't include the tag in the output file
		--notag )
			FILENAME_TAG="no";;

		# Include hostname in output filename
		--force )
			OUTPUT_FORCE="yes";;

		# command line parameter: specify external CSS style file
		--novirt )
			shift
			DEF_SHOW_VIRT="no";;

		# command line parameter: specify the output tag
		-t | --tag )
			shift
			DEF_TAG=$1;;

		# command line parameter: specify user's name in quotes
		-n | --name )
			shift
			DEF_NAME=$1;;

		# command line parameter: specify the user's email address
		-e | --email )
			shift
			DEF_EMAIL=$1;;

		# command line parameter: specify the user's group or team
		-g | --group )
			shift
			DEF_GROUP=$1;;

		# command line parameter: specify the issue being investigated
		-i | --issue )
			shift
			DEF_ISSUE=$1;;

		# command line parameter: specify notes on the hw configuration
		--hwnotes )
			shift
			DEF_CFG_NOTES=$1;;

		# command line parameter: future option, specify output filename
		-o | --output )
			shift
			DEF_OUTPUT=$1;;

		# command line parameter: specify a FQDN primary NIC address
		-f | --fqdn )
			shift
			DEF_FQDN=$1;;

		# command line parameter: specify a FQDN oob (iLO) address
		-o | --oob )
			shift
			DEF_OOB=$1;;

		# command line parameter: specify external CSS style file
		-c | --css )
			shift
			DEF_CSS_FILE=$1;;

		-h | --help )
		usage
		exit 1;;

		# Something we don't understand? show syntax and exit
		* )
		usage
		exit 1;;
	esac
	shift
done

###########################################################
#
# Debugging: Report DEF_ values here before more processing
#
###########################################################

# If the DEBUG option was set, let's report some basic values here.
if [[ $DEBUG == "yes" ]]
then
	echo "Values after parameter processing:"
	echo
	echo "DEF_TAG $DEF_TAG"
	echo "DEF_NAME $DEF_NAME"
	echo "DEF_EMAIL $DEF_EMAIL"
	echo "DEF_GROUP $DEF_GROUP"
	echo "DEF_ISSUE $DEF_ISSUE"
	echo "DEF_CFG_NOTES $DEF_CFG_NOTES"
	echo "DEF_FQDN $DEF_FQDN"
	echo "DEF_OOB $DEF_OOB"
	echo
	echo "PUBLIC_REPORT $PUBLIC_REPORT"
	echo "PROMPT_USER $PROMPT_USER"
	echo "DEF_OUTPUT $DEF_OUTPUT"
	echo "DEF_CSS_FILE $DEF_CSS_FILE"
	echo
fi

###########################################################
#
# Interactive Questions for Report Header
#
###########################################################

if [[ $PROMPT_USER == "no" ]]
then
	# set the working variables to the defaults
	MY_TAG=${DEF_TAG:-"null"}
	MY_NAME=${DEF_NAME:-"null"}
	MY_EMAIL=${DEF_EMAIL:-"null"}
	MY_GROUP=${DEF_GROUP:-"null"}
	MY_ISSUE=${DEF_ISSUE:-"null"}
	MY_FQDN=${DEF_FQDN:-"null"}
	MY_OOB=${DEF_OOB:-"null"}
	MY_CFG_NOTES=${DEF_CFG_NOTES:-"null"}
else

	####################
	echo -e "Provide a short tag to include with this [$DEF_TAG] ?"
	read -p "->" MY_TAG

	# Keep a valid, non-null user supplied value or set it to "null"
	MY_TAG=${MY_TAG:-"null"}

	# If the user value is not "null" and not "" then process it
	# otherwise, set it to the DEF_TAG value set earlier in the script
	if [[ "$MY_TAG" != "null" ]] && [[ X"$MY_TAG" != X ]]
	then

		# Make this tag command line friendly by removing spaces
		MY_TAG=${MY_TAG//[[:space:]]/}

	else	
		# Make this tag command line friendly by removing spaces
		MY_TAG=${DEF_TAG//[[:space:]]/}
	fi

	####################
	echo -e "What's your name [$DEF_NAME] ?" 
	read -p "->" MY_NAME

	# Keep a valid, non-null user supplied value or set it to "null"
	MY_NAME=${MY_NAME:-"null"}

	# If the user value is not "null" and not "" then process it
	# otherwise, set it to the DEF_TAG value set earlier in the script
	if [ "$MY_NAME" != "null" ]
	then
		# redundant - this block is a template for future processing 

		# quote required - spaces will be included!
		MY_NAME="$MY_NAME"
	else	
		# quote required - spaces will be included!
		MY_NAME="$DEF_NAME"
	fi

	####################
	echo -e "What's your email address [$DEF_EMAIL] ?" 
	read -p "->" MY_EMAIL

	# Keep a valid, non-null user supplied value or set it to "null"
	MY_EMAIL=${MY_EMAIL:-"null"}

	# If the user value is not "null" and not "" then process it
	# otherwise, set it to the DEF_TAG value set earlier in the script
	if [ "$MY_EMAIL" != "null" ]
	then
		# redundant - this block is a template for future processing 

		# quote required - spaces will be included!
		MY_EMAIL="$MY_EMAIL"
	else	
		# quote required - spaces will be included!
		MY_EMAIL="$DEF_EMAIL"
	fi

	####################
	echo -e "What group/company/org are you in ('devops') [$DEF_GROUP] ?"
	read -p "->" MY_GROUP

	# Keep a valid, non-null user supplied value or set it to "null"
	MY_GROUP=${MY_GROUP:-"null"}

	# If the user value is not "null" and not "" then process it
	# otherwise, set it to the DEF_TAG value set earlier in the script
	if [ "$MY_GROUP" != "null" ]
	then
		# redundant - this block is a template for future processing 

		MY_GROUP="$MY_GROUP"
	else	
		MY_GROUP="$DEF_GROUP"
	fi

	####################
	echo -e "A simple description for the issue being reported [$DEF_ISSUE] ?"
	read -p "->" MY_ISSUE

	# Keep a valid, non-null user supplied value or set it to "null"
	MY_ISSUE="${MY_ISSUE:-"null"}"

	# If the user value is not "null" and not "" then process it
	# otherwise, set it to the DEF_TAG value set earlier in the script
	if [ "$MY_ISSUE" != "null" ]
	then
		# redundant - this block is a template for future processing 

		# quote required - spaces will be included!
		MY_ISSUE="$MY_ISSUE"
	else	
		# quote required - spaces will be included!
		MY_ISSUE=$DEF_ISSUE
	fi

	####################
	echo -e "Notes about the system configuration? [$DEF_CFG_NOTES]"
	read -p "->" MY_CFG_NOTES

	# Keep a valid, non-null user supplied value or set it to "null"
	MY_CFG_NOTES="${MY_CFG_NOTES:-"null"}"

	# If the user value is not "null" and not "" then process it
	# otherwise, set it to the DEF_TAG value set earlier in the script
	if [ "$MY_CFG_NOTES" != "null" ]
	then
		# quote required - spaces will be included!
		MY_CFG_NOTES="$MY_CFG_NOTES"
	else	
		# quote required - spaces will be included!
		MY_CFG_NOTES="$DEF_CFG_NOTES"
	fi

	####################
	echo -e "What is the FQDN for this systems primary NIC? [$DEF_FQDN]"
	read -p "->" MY_FQDN

	# Keep a valid, non-null user supplied value or set it to "null"
	MY_FQDN="${MY_FQDN:-"null"}"

	# If the user value is not "null" and not "" then process it
	# otherwise, set it to the DEF_TAG value set earlier in the script
	if [ "$MY_FQDN" != "null" ]
	then
		# quote required - spaces will be included!
		MY_FQDN="$MY_FQDN"
	else	
		# quote required - spaces will be included!
		MY_FQDN="$DEF_FQDN"
	fi

	####################
	echo -e "What is the FQDN for this systems out-of-band mgmt NIC? [$DEF_OOB]"
	read -p "->" MY_OOB

	# Keep a valid, non-null user supplied value or set it to "null"
	MY_OOB="${MY_OOB:-"null"}"

	# If the user value is not "null" and not "" then process it
	# otherwise, set it to the DEF_TAG value set earlier in the script
	if [ "$MY_OOB" != "null" ]
	then
		# quote required - spaces will be included!
		MY_OOB="$MY_OOB"
	else	
		# quote required - spaces will be included!
		MY_OOB="$DEF_OOB"
	fi

fi

###########################################################
#
# Clean Up Interactive Answers
#
###########################################################

# If we don't have http on the front of the OOB FQDN, add it.
# Without http:// clicking in this link takes users to a file
if [[ $MY_OOB != "null" && ${MY_OOB:1:7} != "http://" ]]
then
	MY_OOB="http://$MY_OOB/"
fi

###########################################################
#
# Debugging: Report Working "MY_" Variables here
#
###########################################################

if [[ $DEBUG == "yes" ]]
then
	echo "Values after interactive prompting:"
	echo
	echo "MY_TAG $MY_TAG"
	echo "MY_NAME $MY_NAME"
	echo "MY_EMAIL $MY_EMAIL"
	echo "MY_GROUP $MY_GROUP"
	echo "MY_ISSUE $MY_ISSUE"
	echo "MY_CFG_NOTES $MY_CFG_NOTES"
	echo "MY_FQDN $MY_FQDN"
	echo "MY_OOB $MY_OOB"
	echo
fi

###########################################################
#
# Construct output filename using command line options
#
###########################################################

# fast, FQDN?
MY_HOST=$HOSTNAME

# Default prefix for all output filenames
FILENAME_DATA="birdseye"

if [[ $DEBUG == "yes" ]]
then
	echo "Output filename processing:"
	echo
	echo "FILENAME_HOST  $FILENAME_HOST"
	echo "FILENAME_TAG   $FILENAME_TAG"
	echo "FILENAME_YEAR  $FILENAME_YEAR"
	echo "FILENAME_MONTH $FILENAME_MONTH"
	echo "FILENAME_TIME  $FILENAME_TIME"
fi

# Append year ("YYYY" format) to filename?
if [[ $FILENAME_YEAR == "yes" ]]
then
	FILENAME_DATA=$FILENAME_DATA.$(date +%Y)
fi

# Append month-day ("MMDD" format) to filename?
if [[ $FILENAME_MONTH == "yes" ]]
then
	FILENAME_DATA=$FILENAME_DATA.$(date +%m%d)
fi

# Append 24-hour time ("HHMM" format) to filename?
if [[ $FILENAME_TIME == "yes" ]]
then
	FILENAME_DATA=$FILENAME_DATA.$(date +%H%M)
fi

# Append hostname to filename ?
if [[ $FILENAME_HOST == "yes" ]]
then
	FILENAME_DATA=$FILENAME_DATA.$MY_HOST
fi

# Append the user's tag to the filename?
if [[ $FILENAME_TAG == "yes" ]]
then
	FILENAME_DATA="$FILENAME_DATA.$MY_TAG"
fi

# Set the working variable for the output directory to our constructed 
# output filename template
export OUTPUT_DIR="$FILENAME_DATA"

# Does the output directory exist? 
if [[ -d $OUTPUT_DIR ]]
then
	# If we haven't been told to force it, don't overwrite what might
	# be important existing data that can't be recreated
	if [[ $OUTPUT_FORCE == "no" ]]
	then
		echo
		echo "Directory $OUTPUT_DIR exists. Please remove or use --force"
		exit
	else
		echo
		echo "Directory $OUTPUT_DIR exists, using --force to replace it."
		# I'm paranoid about using 'rm -f' with a variable (especially as 
		# root) So we'll keep the existing directory and remove only the
		# old files that might conflict with THIS report.
		# Other files in the existing directory are kept 

		rm -f $OUTPUT_DIR/*.txt birdseye.$FILENAME_DATA.tar birdseye.$FILENAME_DATA.tar.gz
	fi
else # Our output directory does NOT exist

	# Let's try to make a new output directory
	mkdir $OUTPUT_DIR

	# Did we succeed?
	if [ $? != 0 ]
	then
		echo "Error: I can't create directory $OUTPUT_DIR"
		exit
	fi
fi

# HTML is the name of our often used HTML format output file
HTML="$OUTPUT_DIR/$FILENAME_DATA.html"

if [[ $DEBUG == "yes" ]]
then
	echo "Construct Output: OUTPUT_DIR $OUTPUT_DIR"
fi

# These additional ASCII files contain raw output and many users
# wish to have them seperate for processing with 'grep' and other
# programs.
FILENAME_DMI=dmidecode.$FILENAME_DATA.txt
FILENAME_CPU=cpuinfo.$FILENAME_DATA.txt
FILENAME_MSGS=messages.$FILENAME_DATA.txt
FILENAME_SYSLOG=syslog.$FILENAME_DATA.txt
FILENAME_DMESG=dmesg.$FILENAME_DATA.txt
FILENAME_DMESG_NOTIME=dmesg-notime.$FILENAME_DATA.txt
FILENAME_INTER=interrupts.$FILENAME_DATA.txt
FILENAME_PCI=lspci.$FILENAME_DATA.txt
FILENAME_INITRD=initrd.$FILENAME_DATA.txt

FILE_DMI=$OUTPUT_DIR/$FILENAME_DMI
FILE_CPU=$OUTPUT_DIR/$FILENAME_CPU
FILE_MSGS=$OUTPUT_DIR/$FILENAME_MSGS
FILE_SYSLOG=$OUTPUT_DIR/$FILENAME_SYSLOG
FILE_DMESG=$OUTPUT_DIR/$FILENAME_DMESG
FILE_DMESG_NOTIME=$OUTPUT_DIR/$FILENAME_DMESG
FILE_INTER=$OUTPUT_DIR/$FILENAME_INTER
FILE_PCI=$OUTPUT_DIR/$FILENAME_PCI
FILE_INITRD=$OUTPUT_DIR/$FILENAME_INITRD

###########################################################
#
# Traps for CONTROL-C interruption by user
#
###########################################################

function trap_cleanup {

	echo "Trap caught, cleaning up.."

	if [[ -f $OUTPUT_DIR ]]
	then	
		rm -r $OUTPUT_DIR 
	fi

	if [[ -f $OUTPUT_DIR.tar ]]
	then	
		rm -f $OUTPUT_DIR.tar
	fi

	if [[ -f $OUTPUT_DIR.tar.gz ]]
	then	
		rm -f $OUTPUT_DIR.tar.gz
	fi

	exit 255
}

trap 'trap_cleanup; exit 255' SIGINT SIGQUIT SIGTERM

###########################################################
#
# Empty the contents of each file before writing new data
#
# Originally this was used to place a header on each file
# Emptying files now allows ALL future work to be a simple
# append output to each file
###########################################################

for EACH_FILE in \
	$HTML $FILE_DMI $FILE_CPU $FILE_MSGS $FILE_DMESG $FILE_DMESG_NOTIME \
	$FILE_INTER $FILE_PCI $FILE_INITRD
do
	echo -n > $EACH_FILE
done

###########################################################
# QUIRKS
#
# 1) Set defaults here
# 2) Adjust them for the distribution running
# 3) Use them later when trying to execute commands
###########################################################

QUIRK_LSCPU="null"
QUIRK_VIRSH_DOMSTATE="null"
QUIRK_VIRSH_DESC="null"
QUIRK_DMESG_PRE_TIMESTAMP="null"
QUIRK_DMESG_NOTIME_OPTION="null"

###########################################################
#
# Identify our distribution and version
#
# Set values that make a Distribution+Version unique here
#
###########################################################

# Distribution: fedora, redhat, oracle, centos, suse, ubuntu
DIST_NAME="null"

# Release version "5", "6", "11"
DIST_RELEASE="null"

# FUTURE: Release minor version -- We don't use this yet 2013.06.19
DIST_RELEASE_MINOR="null"

# Release Family: "redhat" = (redhat, oracle, centos)
DIST_FAMILY="null"

# Release Family: "redhat" = (redhat, oracle, centos)
DIST_PACKAGES="null"

# Grub configuration file used by distribution+version
DIST_GRUB_CONF="grub.cfg"

# Location for grub.cfg / menu.lst and other files
# /boot/grub is a good default but Redhat uses /boot/grub2 and
# EFI systems may place their files in /boot/efi/efi/Distribution/
# so we'll have to process this some later.
DIST_BOOT_CFG="/boot/grub"

# Fedora contains fedora-release and redhat-release
# Oracle main contain oracle-release and redhat-release as well
#
# So, look for fedora first, set it and skip the others if found
# If not fedora, check for oracle, then redhat and others

if [ -f /etc/fedora-release ]
then
	DIST_NAME="fedora"
	DIST_PACKAGES="rpm"
	DIST_UEFI_DIR="/boot/efi/EFI/Fedora"

	if [ $(cat /etc/fedora-release | grep "release 16" | wc -l) -gt 0 ]
	then
		DIST_RELEASE=16
	elif [ $(cat /etc/fedora-release | grep "release 17" | wc -l) -gt 0 ]
	then
		DIST_RELEASE=17
	elif [ $(cat /etc/fedora-release | grep "release 18" | wc -l) -gt 0 ]
	then
		DIST_RELEASE=18
		DIST_BOOT_CFG="/boot/grub2"
		DIST_GRUB_CONF="grub.cfg"
	elif [ $(cat /etc/fedora-release | grep "release 19" | wc -l) -gt 0 ]
	then
		DIST_RELEASE=19
		DIST_BOOT_CFG="/boot/grub2"
		DIST_GRUB_CONF="grub.cfg"
	fi

elif [ -f /etc/oracle-release ]
then
	DIST_NAME="oracle"
	DIST_FAMILY="redhat"
	DIST_PACKAGES="rpm"
	DIST_UEFI_DIR="/boot/efi/EFI/Oracle"

	if [ $(cat /etc/oracle-release | grep "release 5." | wc -l) -gt 0 ]
	then
		DIST_RELEASE=5
		DIST_GRUB_CONF="grub.conf"
		QUIRK_VIRSH_DOMSTATE="no-reason"
		QUIRK_VIRSH_DESC="no-desc"
		QUIRK_DMESG_NO_TIMESTAMP="null"
	elif [ $(cat /etc/oracle-release | grep "release 6." | wc -l) -gt 0 ]
	then
		DIST_RELEASE=6
		DIST_GRUB_CONF="grub.conf"
	fi

elif [ -f /etc/centos-release ]
then
	DIST_NAME="centos"
	DIST_FAMILY="redhat"
	DIST_PACKAGES="rpm"
	DIST_UEFI_DIR="/boot/efi/EFI/Centos"

	if [ $(cat /etc/centos-release | grep "release 5." | wc -l) -gt 0 ]
	then
		DIST_RELEASE=5
		DIST_GRUB_CONF="grub.conf"
		QUIRK_VIRSH_DOMSTATE="no-reason"
		QUIRK_VIRSH_DESC="no-desc"
		QUIRK_DMESG_NO_TIMESTAMP="null"
	elif [ $(cat /etc/centos-release | grep "release 6." | wc -l) -gt 0 ]
	then
		DIST_RELEASE=6
		DIST_GRUB_CONF="grub.conf"
	elif [ $(cat /etc/centos-release | grep "release 7." | wc -l) -gt 0 ]
	then
		DIST_RELEASE=7
		DIST_BOOT_CFG="/boot/grub2"
		DIST_GRUB_CONF="grub.conf"
	fi

elif [ -f /etc/redhat-release ]
then
	DIST_NAME="redhat"
	DIST_FAMILY="redhat"
	DIST_PACKAGES="rpm"
	DIST_UEFI_DIR="/boot/efi/EFI/Redhat"

	if [ $(cat /etc/redhat-release | grep "release 5." | wc -l) -gt 0 ]
	then
		DIST_RELEASE=5
		DIST_GRUB_CONF="grub.conf"
		QUIRK_VIRSH_DOMSTATE="no-reason"
		QUIRK_VIRSH_DESC="no-desc"
		QUIRK_DMESG_NO_TIMESTAMP="null"
	elif [ $(cat /etc/redhat-release | grep "release 6." | wc -l) -gt 0 ]
	then
		DIST_RELEASE=6
		DIST_GRUB_CONF="grub.conf"
	elif [ $(cat /etc/redhat-release | grep "release 7." | wc -l) -gt 0 ]
	then
		DIST_RELEASE=7
		DIST_BOOT_CFG="/boot/grub2"
		DIST_GRUB_CONF="grub.conf"
	fi

	DIST_RELEASE_VERSION=$(lsb_release -r)
	DIST_RELEASE_VERSION=${DIST_RELEASE_VERSION#*:}
	DIST_RELEASE_VERSION=$(echo $DIST_RELEASE_VERSION | sed 's/ *$//')

	if [[ $DEBUG == "yes" ]]
	then
		echo "DIST_RELEASE_VERSION |${DIST_RELEASE_VERSION}|"
	fi

elif [ -f /etc/SuSE-release ]
then
	DIST_NAME="suse"
	DIST_FAMILY="suse"
	DIST_PACKAGES="zypper"
	DIST_UEFI_DIR="/boot/efi/efi/SuSE"

	if [ $(cat /etc/SuSE-release | grep "Server 11" | wc -l) -gt 0 ]
	then
		DIST_RELEASE="11"
		QUIRK_DMESG_NOTIME_OPTION="no"
	elif [ $(cat /etc/SuSE-release | grep "Server 12" | wc -l) -gt 0 ]
	then
		DIST_RELEASE="12"
	elif [ $(cat /etc/SuSE-release | grep "Server 10" | wc -l) -gt 0 ]
	then
		DIST_RELEASE="10"
	fi

elif [[ $(lsb_release --id | grep "Ubuntu" | wc -l) -eq 1 ]]
then

	DIST_NAME="ubuntu"
	DIST_FAMILY="debian"
	DIST_PACKAGES="dpkg"
	DIST_UEFI_DIR="/boot/efi/efi/Ubuntu"

	MY_VERSION=$(lsb_release -r | awk '{ FS = "\t" ; print $2 } ')

	if [[ $MY_VERSION == "13.04" ]]
	then
		DIST_RELEASE="13"
		QUIRK_LSCPU="noext"
		DIST_BOOT_CFG="/boot/grub"
		DIST_GRUB_CONF="grub.cfg"
	elif [[ $MY_VERSION == "12.04" ]]
	then
		DIST_RELEASE="12"
		QUIRK_LSCPU="noext"
		DIST_BOOT_CFG="/boot/grub"
		DIST_GRUB_CONF="grub.cfg"
	elif [[ $MY_VERSION == "10.04" ]]
	then
		DIST_RELEASE="10"
		QUIRK_LSCPU="noext"
		#DIST_BOOT_CFG="/boot/grub"
		#DIST_GRUB_CONF="grub.cfg"
	fi

elif [ $(lsb_release --id | grep "LinuxMint" | wc -l) -eq 1 ]
then
	DIST_NAME="linuxmint"
	DIST_FAMILY="debian"
	DIST_PACKAGES="dpkg"

	MY_VERSION=$(lsb_release -r | awk '{ FS = "\t" ; print $2 } ')

	if [[ $MY_VERSION == "15" ]]
	then
		DIST_RELEASE="15"
		QUIRK_LSCPU="noext"
	elif [[ $MY_VERSION == "14" ]]
	then
		DIST_RELEASE="12"
		QUIRK_LSCPU="noext"
	fi

	# handle other versions here
	# handle other versions here
	# handle other versions here

fi

###########################################################
#
# Virtualization Host Discovery
#
###########################################################

# default to no
XEN_HOST="no"

# Check for xen management 'xm' command (RHEL 5.x, SLES)
FILE_EXISTS="no"
check_for_program xm
if [[ $FILE_EXISTS == "yes" ]]
then
	if [[ $(xm uptime | grep Domain-0 | wc -l ) -eq 1 ]]
	then
		XEN_HOST="yes"
	else
		XEN_HOST="no"
	fi
else

	# Check for xen management 'xe' command (Citrix XenServer)
	FILE_EXISTS="no"
	check_for_program xe
	if [[ $FILE_EXISTS == "yes" ]]
	then
		if [[ $(xe uptime | grep Domain-0 | wc -l ) -eq 1 ]]
		then
			XEN_HOST="yes"
		else
			XEN_HOST="no"
		fi
	fi
fi

if [[ $DEBUG == "yes" ]]
then
	echo
	echo "XEN Identification: XEN_HOST $XEN_HOST"
fi

###########################################################
#
# Debugging: Report Distribution and Version Results
#
###########################################################
if [[ $DEBUG == "yes" ]]
then

	echo
	echo "DIST_ Variables just before report production"
	echo
	echo "DIST_NAME $DIST_NAME"
	echo "DIST_RELEASE $DIST_RELEASE"
	echo "DIST_RELEASE_MINOR $DIST_RELEASE_MINOR"
	echo "DIST_FAMILY $DIST_FAMILY"
	echo "DIST_PACKAGES $DIST_PACKAGES"
	echo "DIST_GRUB_CONF $DIST_GRUB_CONF"
	echo "DIST_BOOT_CFG $DIST_BOOT_CFG"
	echo
	echo "QUIRK Variables just before report production"
	echo
	echo "QUIRK_LSCPU $QUIRK_LSCPU"
	echo "QUIRK_VIRSH_DOMSTATE $QUIRK_VIRSH_DOMSTATE"
	echo

fi

###########################################################
#
# Let's GO: Produce the HTML Report
#
###########################################################

line "<html>"

line "<head><title>Birdseye Report for $MY_HOST</title>"

#############=============-----------------................
#
# CSS STYLE SHEET for presentation
#
#############=============-----------------................

# future option, not tested yet
if [[ $DEF_CSS_FILE != "null" ]] && [ -f "$DEF_CSS_FILE" ]
then
	cat "$DEF_CSS_FILE" >> $HTML
else

# Future:
# if/then/else here could be used to let the user choose between
# multiple integrated CSS styles for multiple standard presentations
	
cat >> $HTML << CSS-STYLE-SCRIPT
<style type="text/css">

/*********************
 * Body - Overall page defaults
 */
body {
	/* default font */
	font-family: lucida, myriad pro, myriad, verdana, sans-serif;

	/* default text color */
	color: #000;

	/* default page color */
	background-color: #fff;

	/* provides slight margin space on left and right of whole page */
	margin-left: 25px;
	margin-right: 25px;

	/* font size, adjust to smaller at 93% for alternate look */
	font-size: 100%;
}

/*********************
 * Paragraphs
 */
p {
  line-height: 1.0em;
  font-size: 1.0em;
  margin: 2px 0 8px 0px;
}

.toc_master_paragraph {
  margin-left: 20px;
}

/*********************
 * Headings
 */

/*
	This is an example of how heading styles are used and how they
	are called using bash functions within birdseye

	function      h?  Example             Description
	n/a           h1 "Birdseye Report"    Report Title
	toc_section{} h2 "Hardware Summary"   Titles a section of TOC items
	section{}     h2 "Hardware Summary"   Titles a section of information
	title{}       h3 "Product Name"       Titles a group of related items
	item_title{}    h4 "Product Model"    Title for an item of data

*/

h1, h2, h3, h4, h5, h6 {
	margin: 0 0 3px 0;
}

/*********************
 * Headings: h1: Top of Report Title page
 */

h1 {
  font-size: 1.5em;
  font-weight: bold;
  color: #3c6eb4;
}

/*********************
 * Headings: h2: Calls attention to sections of data
 */
h2 {
  font-size: 1.3em;
  font-weight: bold;
  color: #3c6eb4;
  text-decoration: underline;
}

/* Used as a title for each item of information being reported */
h3 {
  font-size: 1.05em;
  font-weight: bold;
  color: #3c6eb4; 
}

/* Used as a title for each sub-item of information being reported */
h4 {
  font-size: 0.95em;
  font-weight: bold;
}

/* Used to show raw commands in title without the title's bold */
.h3_nobold {
	font-weight: underline;
	font-family: "Andale Mono", "Courier New", "Courier", "Fixed"
}

/* Used to show raw commands in title without the title's bold */
.h4_nobold {
	font-weight: normal;
	font-family: "Andale Mono", "Courier New", "Courier", "Fixed"
}

/* Hovering over the link to the Birdseye Landing page */
h1 a:hover {
  color: #EC5800;
  text-decoration: none;
}

/* Hovering over a heading that links to something */
h2 a:hover,
h3 a:hover,
h4 a:hover {
  color: #666666;
  text-decoration: none;
}


/*********************
 * Lists
 */

/* Used to show raw commands in list items using fixed width fonts */
.list_nobold {
	font-weight: normal;
	font-size: 0.75em;
	font-family: "Andale Mono", "Courier New", "Courier", "Fixed"
}

/*********************
 * Links
 */

a:link      { color:#3c6eb4; text-decoration: none; }
a:visited   { color:#004E66; text-decoration: underline; }
a:active    { color:#3c6eb4; text-decoration: underline; }
a:hover     { color:#000000; text-decoration: underline; }

/* Lists */
ol, ul, li {
  margin: 2px 0 8px 0px;
  line-height: 1.0em;
  font-size: 1.0em;
  margin: 2px 0 8px 0px;
}

/*********************
 * Lists
 */

/* This makes a little box with the word "Top" in it that takes the user
   back to the top of the page */
.boxtop {
	color: #A7ABBE;
/*
	padding: 2px;
	background-color: rgb(214,227,255);
	border-width: 1px;
	border-style: solid;
	border-radius: 8px;
	border-color: #CFCFCF;
	font-size: 0.75em;
	-moz-box-shadow: 3px 3px 5px #DFDFDF;
	-webkit-box-shadow: 3px 3px 5px #DFDFDF;
	-khtml-box-shadow: 3px 3px 5px #DFDFDF;
	-o-box-shadow: 3px 3px 5px #DFDFDF;
	box-shadow: 3px 3px 5px #DFDFDF;
	-moz-border-radius: 8px;
	-webkit-border-radius: 8px;
	-khtml-border-radius: 8px;
	margin: 0 0 0 1ex;
*/
}

/*
.boxtop a:link      { color:red; text-decoration: none; }
.boxtop a:visited   { color:blue; text-decoration: underline; }
.boxtop a:active    { color:purple; text-decoration: underline; }
*/

/* Hovering over the link to the Birdseye Landing page */
.boxtop a:hover {
  color: #EC5800;
	background-color: red;
  text-decoration: none;
}

/*
	Raw output data from commands,
	Presented as a box with soft, rounded corners, 3D shadowing, 
	A different background color,
	Uses a fixed width font to preserve raw output column formatting.
*/

.programlisting {

  border-width: 1px;
  border-style: solid;
  border-radius: 8px;
  border-color: #CFCFCF;
  background-color: rgb(238,232,213);
  padding: 12px;
  margin: 0px 25px 20px 25px;
  overflow: auto;

  box-shadow: 3px 3px 5px #DFDFDF;
  -moz-box-shadow: 3px 3px 5px #DFDFDF;
  -webkit-box-shadow: 3px 3px 5px #DFDFDF;
  -khtml-box-shadow: 3px 3px 5px #DFDFDF;
  -o-box-shadow: 3px 3px 5px #DFDFDF;
  -moz-border-radius: 8px;
  -webkit-border-radius: 8px;
  -khtml-border-radius: 8px;
}

.raw_textarea {

  border-width: 1px;
  border-style: solid;
  border-radius: 8px;
  border-color: #CFCFCF;
  background-color: rgb(238,232,213);
  padding: 12px;
  margin: 0px 25px 20px 25px;
  overflow: auto;

  box-shadow: 3px 3px 5px #DFDFDF;
  -moz-box-shadow: 3px 3px 5px #DFDFDF;
  -webkit-box-shadow: 3px 3px 5px #DFDFDF;
  -khtml-box-shadow: 3px 3px 5px #DFDFDF;
  -o-box-shadow: 3px 3px 5px #DFDFDF;
  -moz-border-radius: 8px;
  -webkit-border-radius: 8px;
  -khtml-border-radius: 8px;
}

/* Used to call attention to helpful tips such as additional information
 * 	being available in external files, or what a command's output is
 * 	useful for
*/
blockquote.tip {

  background-color: #F5F298;
  color: black;

  border-width: 1px;
  border-style: solid;
  border-color: #DBDBCC;

  padding: 12px;
  margin: 0px 25px 20px 25px;
	width: 55%;

  overflow: auto;
  -moz-border-radius: 8px;
  -webkit-border-radius: 8px;
  -khtml-border-radius: 8px;
  border-radius: 8px;

  -moz-box-shadow: 3px 3px 5px #DFDFDF;
  -webkit-box-shadow: 3px 3px 5px #DFDFDF;
  -khtml-box-shadow: 3px 3px 5px #DFDFDF;
  -o-box-shadow: 3px 3px 5px #DFDFDF;
  box-shadow: 3px 3px 5px #DFDFDF;

}

</style>
CSS-STYLE-SCRIPT

fi # if/then/else handling ends for CSS external file & inline style

line "</head>"

#############=============-----------------................
#
# Report Header
#
#############=============-----------------................

line "<body>"

line "<h1><a name=\"Top\"><a href=http://www.maxwellspangler.com/linux/birdseye/>Bird's Eye</a> System Inventory for $MY_HOST</a></h1>" 

paragraph "Produced on $(date "+%A, %B %d %Y at %H:%m") by $MY_NAME ( $MY_EMAIL ) of $MY_GROUP"

if [[ $MY_ISSUE != "null" ]]
then
	paragraph "Issue <strong>$MY_ISSUE</strong>" 
else
	paragraph "Issue $MY_ISSUE" 
fi

if [[ $MY_CFG_NOTES != "null" ]]
then
	paragraph "Configuration Notes <strong>$MY_CFG_NOTES</strong>" 
else
	paragraph "Configuration Notes $MY_CFG_NOTES" 
fi

paragraph "Capture File $OUTPUT_DIR"

# Do we have both a FQDN port for this system and an OOB mgmt port?
if [[ $MY_FQDN != "null" ]] && [[ $MY_OOB != "null" ]]
then

	paragraph "$HOSTNAME is accessibile at $MY_FQDN with an out-of-band mgmt port at <a href=$MY_OOB target=_birdseye_oob>$MY_OOB</a>"

# Do we have only a FQDN port for this system (no OOB mgmt port)?
elif [[ $MY_FQDN != "null" ]]
then
	paragraph "$HOSTNAME is accessibile at $MY_FQDN"
fi

line "<hr>"

#############=============-----------------................
#
# Master Table of Contents TOC
#
#############=============-----------------................

line "<h2><a name=\"toc\">Table of Contents - Master</a></h2>" 

line "<div class=\"toc_master\">"

paragraph "Linux Environment"

# Linux/Software/Configuration
toc_master "#toc_linux_summary" "Linux Summary"
toc_master "#toc_bootmsgs" 			"Boot messages"
toc_master "#toc_messages"			"Console/System Messages"
toc_master "#toc_kernelcfg"	 		"Kernel Configuration"
toc_master "#toc_bootcfg" 			"Boot Configuration"
toc_master "#toc_modules"		 		"Kernel Modules"
toc_master "#toc_network_cfg"		"Network Configuration"
toc_master "#toc_storage_cfg"		"Storage Configuration"
toc_master "#toc_packages"			"Repositories and Software Packages"
toc_master "#toc_udev"					"Udev configuration"
toc_master "#toc_serial"				"Serial device configuration"
toc_master "#toc_xwindows"			"X-Windows"

paragraph "Hardware Resources"

# Hardware/Device/Physical resources
toc_master "#toc_hw_summary"	 	"Hardware Summary"
toc_master "#toc_cpuinfo"				"Processor/CPU information"
toc_master "#toc_dmidecode"			"System Board Information"
toc_master "#toc_inter"					"Interrupts"
toc_master "#toc_pci"						"Expansion Cards (PCI, PCI-X, PCIe, etc)"
toc_master "#toc_usb"						"USB System"
toc_master "#toc_network_dev"		"Network Devices"
toc_master "#toc_storage"				"Storage Devices"
toc_master "#toc_periphs"				"Peripherals"

paragraph "Virtualization"

# Less widely used configuration/resources
toc_master "#toc_virt" "Virtualization"
toc_master "#toc_xen" "Xen Virtualization"
toc_master "#toc_vms" "Virtual Machines"

line "</div>"
line "<hr>"

#############=============-----------------................
#
# Detailed Table of Contents
#
#############=============-----------------................

line "<h2><a name=\"toc\">Table of Contents - Detail</a></h2>" 

line "<div class=\"toc_detail\">"

toc_section "toc_linux_summary" "Linux Summary" "#section_linux_summary"
unordered_list_open
list "item_hostname"					"System name" "hostname"
list "item_date"							"System date/time" "date"
list "item_uname"							"System identification" "uname -a"
list "item_issue"							"Distribution, Version" "/etc/issue"
list "item_lsb"								"Distribution, Release" "lsb_release"
list "item_kerneltaint"				"Distribution, Release" "lsb_release"
list "item_kernelvers"				"Kernel Version & GCC Compile Version" "cat /proc/version"
unordered_list_close

toc_section "toc_bootmsgs"		"Boot messages" "#section_dmesg"

unordered_list_open
list "item_dmesg_notime"			"Linux boot messages (without timestamps)" "dmesg"
list "item_dmesg_time"				"Linux boot messages (with timestamps)" "dmesg"
unordered_list_close

toc_section "toc_messages"		"Console/System Messages" "#section_messages"

unordered_list_open
list "item_messages"					"Linux system log" "cat /var/log/messages | cat /var/log/syslog"
unordered_list_close


toc_section "toc_kernelcfg"		"Kernel Configuration" "#section_kernelcfg"

unordered_list_open
list "item_kernelsinstalled"	"Kernels Installed" "rpm -qa | grep kernel-"
list "item_kerneltaint"				"Kernel Taint Value" "cat /proc/sys/kernel/tainted"
list "item_sysctl"						"System Control Parameters" "sysctl"
list "item_systemmap"					"System Map" "cat /boot/System.map.$(uname -r)"
unordered_list_close

toc_section "toc_bootcfg"			"Boot Configuration" "#section_bootcfg"

unordered_list_open
list "item_cmdline"						"Boot parameters" "cat /proc/cmdline"
list "item_bootdir"						"Boot directory" "ls -lR /boot"
list "item_efidir"						"EFI Boot directory" "ls -lR /boot/efi"
list "item_grubconf"					"Boot Grub Config File" "cat /boot/grub/grub.conf"
list "item_grubmenulst"				"Boot Grub Menu File" "cat /boot/grub/menu.lst"
list "item_grubdevmap"				"Boot Grub Device Map" "cat /boot/grub/device.map"
list "item_grubconfetc"				"/etc Grub Config File" "cat /etc/grub.conf"
list "item_efibootmgr"				"EFI boot configuration" "efibootmgr"
list "item_elilo"							"ELILO Config (EFI only)" "cat /boot/efi/efi/(dist)/elilo.conf"
list "item_elilolist"					"ELILO List Config (EFI only)" "cat /boot/efi/efi/(dist)/elilo.list"
list "item_redhatgrub"				"EFI: Redhat Grub" "cat /boot/efi/redhat/grub.conf"
unordered_list_close

toc_section "toc_modules"			"Kernel Modules" "#section_modules"

unordered_list_open
list "item_lsmod"							"Kernel Modules" "lsmod"
list "item_modconf"						"Kernel Module Configuration" "cat /etc/modules.conf"
list "item_modblist"					"Kernel Module Blacklist" "cat /etc/modprobe.d/blacklist.conf"
list "item_modinfo"						"Kernel Module Info" "modinfo"
list "item_moddep"						"Module Dependencies" "cat /lib/modules/(kernel)/modules.dep"
unordered_list_close

toc_section "toc_network_cfg"	"Network Configuration" "#section_network_cfg"

unordered_list_open
list "item_resolv"						"DNS Resolution" "cat /etc/resolv.conf"
list "item_hosts"							"Local Hosts" "cat /etc/hosts"
list "item_iproute"						"Network routing table via ip route" "ip route"
list "item_netstat"						"Network routing table via netstat" "netstat"
list "item_firewall"					"Firewall rules" "iptables -L"
unordered_list_close

toc_section "toc_storage_cfg"	"Storage Configuration" "#section_storage_cfg"

unordered_list_open
list "item_fsblk"							"Filesystem Block Devices" "lsblk -fi"
list "item_fstab"							"Filesystem mount table" "fstab"
list "item_mount"							"Mounted filesystems" "mount"
list "item_pvscan"						"LVM2: Physical Volumes" "pvscan"
list "item_pvs"								"LVM2: Physical Volumes" "pvs"
list "item_vgscan"						"LVM2: Volume Groups" "vgscan"
list "item_vgs"								"LVM2: Volume Groups" "vgs"
list "item_lvscan"						"LVM2: Logical Volumes" "lvscan"
list "item_lvs"								"LVM2: Logical Volumes" "lvs"
unordered_list_close

toc_section "toc_packages"		"Repositories and Software Packages" "#section_packages"
unordered_list_open
if [[ $DIST_PACKAGES == "rpm" ]]
then
	list "item_rpm_config"				"Repository Config (yum)" "cat /etc/yum.repos.d/*"
	list "item_rpm_repos"					"Repositories (yum)" "cat /etc/yum.repos.d/*"
	list "item_rpm_pkgs"					"Installed Packages (rpm)" "rpm -qa"

elif [[ $DIST_PACKAGES == "dpkg" ]]
then
	list "item_apt_config"				"Repository Config (apt)" "cat /etc/apt/apt.conf"
	list "item_apt_repos"					"Repositories (apt)" "cat /etc/apt/sources.list"
	list "item_dpkg_pkgs"					"Installed Packages (dpkg)" "dpkg -l"

elif [[ $DIST_PACKAGES == "zypper" ]]
then
	list "item_zypper_config"			"Repository Config (zypper)" "cat /etc/zypp/zypper.config"
	list "item_zypper_repos"			"Repositories (zypper)" "cat /etc/zypp/repos.d/*"
	list "item_zypper_pkgs"				"Installed Packages (zypper)" "zypper search.."
fi
unordered_list_close

toc_section "toc_udev"				"Udev configuration" "#section_udev"

unordered_list_open
list "item_udevconf"					"udev configuration" "cat /etc/udev.conf"
list "item_udevrules"					"udev rules" "cat /etc/udev/rules.d/*"
unordered_list_close

toc_section "toc_serial"			"Serial device configuration" "#section_serial"

unordered_list_open
list "item_serialdmesg"				"Serial devices in dmesg logs" "dmesg | grep tty<serial>"
list "item_serialproc"				"Serial devices /proc" "cat /proc/tty/drivers/*"
list "item_setserial"					"Serial devices" "setserial -g ttyS[0123456789]"
unordered_list_close

toc_section "toc_xwindows"		"X-Windows" "#section_xwindows"

unordered_list_open
list "item_xrandr"						"X RandR: Resize, Rotate and Reflect Extension Ifno" "xrandr"
list "item_dpyinfo"						"X Display Info" "xdpyinfo"
list "item_glxinfo"						"GLX Info" "glxinfo/glxinfo64"
unordered_list_close

toc_section "toc_hw_summary"  "Hardware Summary" "#section_hw_summary"

unordered_list_open
list "item_product"						"Product Name" "dmidecode -s system-product-name"
list "item_processor_line"		"Processor Summary"
list "item_first_proc"				"First processor" "cat /proc/cpuinfo"
list "item_memsum"						"Memory" "/proc/meminfo"
list "item_bios_vendor"				"BIOS Vendor" "dmidecode -s bios-vendor"
list "item_bios_vers"					"BIOS Version" "dmidecode -s bios-version"
list "item_bios_date"					"BIOS Release Date" "dmidecode -s bios-release-date"
list "item_lsinitrd" 					"initrd information" "lsinitrd"
unordered_list_close

toc_section "toc_dmidecode"		"System Board Information" "#section_dmidecode"

unordered_list_open
list "item_dmidecode"					"System Board information" "dmidecode"
unordered_list_close

toc_section "toc_cpuinfo"			"Processor/CPU information" "#section_processor"

unordered_list_open
list "item_proc_family"				"Processor Family" "dmidecode -s processor-family"
list "item_proc_vers"					"Processor Version" "dmidecode -s processor-version"
list "item_proc_count"				"Processor Count" ""
list "item_processor_lscpu"		"Processor Details" "lscpu"
list "item_processor_lscpue"	"Processor List" "lscpu -e"
list "item_processor_over"		"First Processor" "cat /proc/cpuinfo"
list "item_meminfo"						"Memory Info" "cat /proc/meminfo"
list "item_freemem"						"Free Memory" "free"
list "item_mtrr"							"MTRR" "cat /proc/mtrr"
list "item_numashow"					"NUMA Topology" "numactl --show"
list "item_numahw"						"NUMA Hardware topology" "numactl --hardware"
unordered_list_close

toc_section "toc_inter"				"Interrupts" "#section_inter"

unordered_list_open
list "item_inter"							"Interrupts" "cat /proc/interrupts"
unordered_list_close

toc_section "toc_pci"					"Expansion Cards" "PCI, PCI-X, PCIe, etc" "#section_pci"

unordered_list_open
#list "item_cards"							"Expansion cards" "sutl cards"
list "item_iomem"							"Peripheral IO memory" "cat /proc/iomem"
list "item_ioports"						"Peripheral IO ports" "cat /proc/ioports"
list "item_devices" 					"Devices" "cat /proc/devices"
list "item_lspci"							"PCI devices" "lspci"
list "item_lspcivv"						"PCI Devices Detail" "lspci -vv"
unordered_list_close

toc_section "toc_usb"					"USB subsystem" "#section_usb"

unordered_list_open
list "item_lsusb"							"USB Devices" "lsusb"
list "item_lsusbpy"						"USB Devices Speed & Power" "lsusb.py"
list "item_lsusbv"						"USB Devices Detail" "lsusb -v"
list "item_lsusbt"						"USB Devices Tree" "lsusb -t"
unordered_list_close

toc_section "toc_network_dev"	"Network Devices" "#section_network_devices"

unordered_list_open
#list "item_sutlnics"					"Network cards" "sutl nics"
list "item_nicinfo"						"Network port information" "nic-info"
list "item_nicports"					"Network port detail information" "ifconfig, ethtool, ethtool -i"
unordered_list_close

toc_section "toc_storage"  		"Storage" "#section_storage"

unordered_list_open
#list "item_sutlhbas"					"Host Bus Adapter information" "sutl hbas"
list "item_lsblk"							"Block Storage Devices" "lsblk"
list "item_lsscsi"						"SCSI Information" "lsscsi"
list "item_procscsi"					"SCSI Information via proc" "cat /proc/scsi/scsi"
list "item_qla2xxx"						"Fibre Channel Storage: QLogic (qla2xxx)" "cat /proc/scsi/qla2xxx"
list "item_lpfc"							"Fibre Channel Storage: Emulex Lightpath (qla2xxx)" "cat /proc/scsi/lpfc"
list "item_qla2xxx"						"Fibre Channel Storage: Brocade (bfa)" "cat /proc/scsi/bfa"

unordered_list_close

toc_section "toc_periphs"			"Peripherals" "#section_periphs"

unordered_list_open
list "item_cdinfo"						"DVD/CD drive info" "cd-info"
unordered_list_close

toc_section "toc_virt"				"Virtualization" "#section_virt"

unordered_list_open
list "item_kvminfo"						"KVM Version" "modinfo kvm"
list "item_kvmhwinfo"					"KVM Hardware Version" "modinfo kvm_intel | modinfo kvm_amd"
list "item_virshvers"					"Virtualization version" "virsh version"
list "item_virshnodeinfo"			"Virtualization nodes" "virsh nodeinfo"
list "item_virshnodecpu"			"Virtualization nodes cpus" "virsh nodecpustats"
list "item_virshnodemem"			"Virtualization nodes memory" "virsh nodememstats"
list "item_virshnodedevlist"	"Virtualization node devices" "virsh nodedev-list"
list "item_virshnodedevxml"		"Virtualization node devices xml" "virsh nodedev-dumpxml"
list "item_virsh_iflist"			"Virtualization interface List" "virsh iface-list"
list "item_virsh_netlist"			"Virtualization Network List" "virsh net-list"
unordered_list_close

toc_section "toc_vms"					"Virtual Machines" "#section_vms"
unordered_list_open
list "item_vms"								"Virtual Machines Defined" "virsh list --all"
list "item_virsh_pool_list"		"Virtualization Storage Pool List" "virsh pool-list"
list "item_virsh_pool_info"		"Virtualization Storage Pool Info" "virsh pool-info"
list "item_virsh_vol_list"		"Virtualization Storage Volume List" "virsh vol-list"
list "item_virsh_vol_info"		"Virtualization Storage Volume Info" "virsh vol-info"
list "item_vm_details"				"Virtual Machine Details" "--"
unordered_list_close

toc_section "toc_xen"					"Xen Virtualization" "#section_xen"

unordered_list_open
list "item_xenconfig"					"Xen Configuration" "cat /etc/xen/xend-config.sxp"
unordered_list_close

line "</div>"

line "<hr>"

echo "Table of Contents constructed"

#############=============-----------------................
#
# Linux Summary - The Basics: System Name, Date/time, Distribution
#
#############=============-----------------................

section "section_linux_summary" "Linux Summary"

item_title "item_hostname"	"System name" "hostname"
raw_open
hostname >> $HTML 2>&1
raw_close

item_title "item_date"		"System date/time" "date"
raw_open
date >> $HTML 2>&1
raw_close

item_title "item_hwclock"		"Hardware Clock System date/time" "hwclock"
raw_open
hwclock >> $HTML 2>&1
raw_close

item_title "item_uname"		"System identification" "uname -a"
raw_open
uname -a >> $HTML 2>&1
raw_close

item_title "item_issue"		"Distribution, Version" "/etc/issue"
raw_open
cat /etc/issue >> $HTML 2>&1
raw_close

item_title "item_lsb"			"Distribution, Release" "lsb_release"
raw_open
FILE_EXISTS="no"
check_for_program lsb_release
if [[ $FILE_EXISTS == "yes" ]]
then
	lsb_release -d >> $HTML 2>&1
else
	line "'lsb_release' does not exist on this system."
fi
raw_close

item_title "item_kernelvers"			"Kernel Version & GCC Compile Version" "cat /proc/version"
raw_open
cat /proc/version >> $HTML 2>&1
raw_close

#############=============-----------------................
#
# Log Files
#
#############=============-----------------................

section "section_dmesg" "Boot messages"

item_title "item_dmesg_notime"		"Linux boot messages without timestamps" "dmesg --notime"
textarea_open 120 24
if [[ $QUIRK_DMESG_PRE_TIMESTAMP == "yes" ]]
then
	line "The dmesg command in this version of Linux does not support timestamps."
else

	# This version of Linux does support timestamps, strip them with --notime
	# or manually using cut

	# If this quirk is not set to no, then use the --notime option
	if [[ $QUIRK_DMESG_NOTIME_OPTION != "null" ]]
	then
		dmesg --notime >> $HTML 2>&1
		dmesg --notime >> $FILE_DMESG_NOTIME
	else
		# quirk: SLES 11 SP3 - no atime option, use cut to remove the time
		dmesg | cut -c15-254 >> $HTML 2>&1
		dmesg | cut -c15-254 >> $FILE_DMESG_NOTIME
	fi
fi
textarea_close

item_title "item_dmesg_time"		"Linux boot messages with timestamps" "dmesg"
textarea_open 120 24
dmesg >> $HTML 2>&1
dmesg >> $FILE_DMESG
textarea_close

helpful_tip "Detailed information is available in the <a href=file:$BASE_FILE_DMESG target=_file_dmesg>separate dmesg info file.</a>"

section "section_messages" "Console/System Messages"

item_title "item_messages"	"Linux system log" "cat /var/log/messages | cat /var/log/syslog"

# need to edit for debian, newer fedora, etc
if [ -f /var/log/messages ]
then
	declare -i MSG_LINES

	# Check the size of /var/log/messages
	MSG_LINES=$(wc -l /var/log/messages | awk '{FS=" ";print $1}')

	textarea_open 120 24

	# A large messages file is usually full of unwanted crap like
	# sound card and GUI errors.  So lets show only a reasonable amount
	# if the file is very large.
	if [[ $MSG_LINES -gt 25000 ]]
	then
		# file is longer than 25000 lines
		echo "/var/log/messages is $MSG_LINES long.  This is the last 25000 lines" >> $HTML 2>&1
		tail -n 25000 /var/log/messages >> $HTML 2>&1
	else
		# file is shorter than 25000 lines
		cat /var/log/messages >> $HTML 2>&1
	fi

	textarea_close

	echo "/var/log/messages:" >> $FILE_MSGS
	cat /var/log/messages >> $FILE_MSGS

	helpful_tip "Detailed information is available in the <a href=file:$BASE_FILE_MSGS target=_file_msgs>separate messages file.</a>"
fi

if [ -f /var/log/syslog ]
then

	textarea_open 120 24
	cat /var/log/syslog >> $HTML 2>&1
	textarea_close

	echo "/var/log/syslog:" >> $FILE_SYSLOG
	cat /var/log/syslog >> $FILE_SYSLOG

	helpful_tip "Detailed information is available in the <a href=file:$BASE_FILE_SYSLOG target=_file_msgs>separate syslog file.</a>"
fi

#############=============-----------------................
#
# Kernel Configuration
#
#############=============-----------------................

section "section_kernelcfg" "Kernel Configuration"

item_title "item_kernelsinstalled"		"Installed Kernels" "rpm -qa | grep -kernel"
if [[ $DIST_PACKAGES == "rpm" ]]
then
	raw_open
	rpm -qa | fgrep "kernel-" | grep -v "devel" | grep -v "header" >> $HTML 2>&1
	raw_close
else
	raw_open
	line "Birdseye lacks the functionality to determine ${MY_DIST}'s installed kernels."
	raw_close
fi

item_title "item_kerneltaint"		"Kernel Tainted Value" "cat /proc/sys/kernel/tainted"
raw_open
cat /proc/sys/kernel/tainted >> $HTML 2>&1
raw_close

item_title "item_sysrq"	"Magic SysRq Key Enablement" "cat /proc/sys/kernel/sysrq"

SYSRQ_ENABLE=$(cat /proc/sys/kernel/sysrq)
raw_open
if [[ $SYSRQ_ENABLE == "0" ]]
then
	line "The Magic SysRq feature is not enabled."
elif [[ $SYSRQ_ENABLE == "0" ]]
then
	line "The Magic SysRq feature is enabled."
else
	line "/proc/sys/kernel/sysrq reports $SYSRQ_ENABLE"
fi
raw_close

item_title "item_sysctl"	"System Control Parameters" "sysctl"

textarea_open 120 24
sysctl -a >> $HTML 2>&1
textarea_close

item_title "item_systemmap"	"System Map" "cat /boot/System.map.$(uname -r)"

if [[ -f /boot/System.map-$(uname -r) ]]
then
	textarea_open 120 24
	cat /boot/System.map-$(uname -r)  >> $HTML 2>&1
	textarea_close
else
	raw_open
	line "I cannot find a System.map file for kernel " $(uname -r) " in /boot."
	raw_close
fi

#############=============-----------------................
#
# Boot Configuration
#
#############=============-----------------................

section "section_bootcfg" "Boot Configuration"

item_title "item_cmdline"		"Boot parameters" "cat /proc/cmdline"
raw_open
cat /proc/cmdline >> $HTML 2>&1
raw_close

item_title "item_bootdir"		"Boot directory" "ls -l /boot"
textarea_open 120 24
ls -lR /boot >> $HTML 2>&1
textarea_close

item_title "item_efidir"		"EFI Boot directory" "ls -l /boot/efi"
if [[ -d /boot/efi ]]
then
	textarea_open 120 24
	ls -lR /boot/efi >> $HTML 2>&1
	textarea_close
else
	raw_open
	line "There is no /boot/efi directory on this system."
	raw_close
fi

EFI_BOOT="null"

# defaults to /boot/grub2
MY_BOOT_DIR="$DIST_BOOT_CFG"

# We should only have /sys/firwmare/efi on an EFI system
if [[ -d /sys/firmware/efi ]]
then
	EFI_BOOT="yes"

	#	Find out what kernel we booted: remove 'BOOT_IMAGE=dev0000:\"
	MY_CMDLINE=$(cat /proc/cmdline)

	if [[ $DEBUG == "yes" ]]
	then
		echo "EFI Processing: MY_CMDLINE $MY_CMDLINE"
		echo
	fi

	# EFI systems in native EFI boot manager mode provides us
	# with a sophisticated path to efi boot images via /proc/cmdline
	if [[ $MY_CMDLINE = *:\\efi* ]]
	then

		if [[ $DEBUG == "yes" ]]
		then
			echo "EFI Processing: We see a native EFI /proc/cmdline"
			echo
		fi

		# Real system example
		# BOOT_IMAGE=dev000:\efi\SuSE\vmlinuz-3.0.76-0.11-default root=/dev/disk/by-id/scsi-3600c0ff000db1c6597969f5101000000-part3  resume=/dev/disk/by-id/scsi-3600c0ff000db1c6597969f5101000000-part2 splash=silent crashkernel=256M-:128M showopts console=ttyS0,115200

		# Remove prefix 'BOOT_IMAGE=dev0000:\"
		MY_CMDLINE=${MY_CMDLINE#*:\\}
		if [[ $DEBUG == "yes" ]]
		then
			echo "EFI Processing: Remove Leading Info $MY_CMDLINE"
			echo
		fi

		# Remove suffix "root=..."
		MY_CMDLINE=${MY_CMDLINE%% *}
		if [[ $DEBUG == "yes" ]]
		then
			echo "EFI Processing: Remove Trailing Info $MY_CMDLINE"
			echo
		fi

		# Remove suffix "\vmlinuz.."
		MY_CMDLINE=${MY_CMDLINE%\\*}
		if [[ $DEBUG == "yes" ]]
		then
			echo "EFI Processing: Remove Kernel Name $MY_CMDLINE"
			echo
		fi

		# Result: /boot/efi/efi/SuSE /boot/efi/efi/Fedora
		MY_BOOT_DIR="/boot/efi/${MY_CMDLINE}"
		if [[ $DEBUG == "yes" ]]
		then
			echo "EFI Processing: MY_BOOT_DIR $MY_BOOT_DIR"
		fi

		# Change EFI DOS style backslashes to Linux style forward-slashes
		MY_BOOT_DIR=${MY_BOOT_DIR//\\//}
		if [[ $DEBUG == "yes" ]]
		then
			echo "EFI Processing: Change backslashes to slashes MY_BOOT_DIR $MY_BOOT_DIR"
		fi

	fi

else
	EFI_BOOT="no"
fi

if [[ $DEBUG == "yes" ]]
then
	echo "Boot Configuration: MY_BOOT_DIR FINAL $MY_BOOT_DIR"
	echo "Boot Configuration: DIST_UEFI_DIR $DIST_UEFI_DIR"
fi

item_title "item_grubconf"		"GRUB Config File" "cat grub.cfg"
if [[ -f $MY_BOOT_DIR/$DIST_GRUB_CONF ]]
then
	paragraph "Reporting on $MY_BOOT_DIR/$DIST_GRUB_CONF"

	textarea_open 120 24
	cat $MY_BOOT_DIR/$DIST_GRUB_CONF >> $HTML 2>&1
	textarea_close
else

	if [[ $EFI_BOOT == "yes" ]] && [[ -f $DIST_UEFI_DIR/$DIST_GRUB_CONF ]]
	then
		paragraph "Reporting on $DIST_UEFI_DIR/$DIST_GRUB_CONF"

		textarea_open 120 24
		cat $DIST_UEFI_DIR/$DIST_GRUB_CONF >> $HTML 2>&1
		textarea_close
	else
		raw_open
		line "I can't find $DIST_GRUB_CONF in the expected places."
		raw_close
	fi

fi

item_title "item_grubmenulst"		"GRUB Config File" "cat menu.lst"
if [[ -f $MY_BOOT_DIR/menu.lst ]]
then
	paragraph "Reporting on $MY_BOOT_DIR/menu.lst"

	textarea_open 120 24
	cat $MY_BOOT_DIR/menu.lst >> $HTML 2>&1
	textarea_close
else

	if [[ $EFI_BOOT == "yes" ]] && [[ -f $DIST_UEFI_DIR/menu.lst ]]
	then
		paragraph "Reporting on $DIST_UEFI_DIR/menu.lst"

		textarea_open 120 24
		cat $DIST_UEFI_DIR/menu.lst >> $HTML 2>&1
		textarea_close
	else
		raw_open
		line "I can't find menu.lst in the expected places."
		raw_close
	fi

fi

item_title "item_grubdevmap"		"GRUB Device Map" "cat device.map"
raw_open
if [[ -f $MY_BOOT_DIR/device.map ]]
then
	paragraph "Reporting on $MY_BOOT_DIR/device.map"
	cat $MY_BOOT_DIR/device.map >> $HTML 2>&1
else
	line "I can't find $MY_BOOT_DIR/device.map in the expected places."
fi
raw_close

item_title "item_efibootmgr"		"EFI Boot Configuration" "efibootmgr"
if [[ $EFI_BOOT == "yes" ]]
then

	FILE_EXISTS="no"
	check_for_program efibootmgr
	if [[ $FILE_EXISTS == "yes" ]]
	then
		textarea_open 120 24
		efibootmgr >> $HTML 2>&1
		textarea_close
	else
		raw_open
		line "efibootmgr is not present on this system." 
		raw_close
	fi

else
	raw_open
	line "This is not an EFI system - Skipping EFI Boot Configuration reporting."
	raw_close
fi

item_title "item_elilocfg"		"ELILO Config File" "cat elilo.conf"
if [[ $EFI_BOOT == "yes" ]]
then
	if [[ -f $MY_BOOT_DIR/elilo.conf ]]
	then
		paragraph "Reporting on $MY_BOOT_DIR/elilo.conf"

		textarea_open 120 24
		cat $MY_BOOT_DIR/elilo.conf >> $HTML 2>&1
		textarea_close
	else
		raw_open
		line "$MY_BOOT_DIR/elilo.conf is not present on this system."
		raw_close
	fi

	item_title "item_elilolist"		"ELILO List Config File" "cat elilo.list"
	if [[ -f $MY_BOOT_DIR/elilo.list ]]
	then
		paragraph "Reporting on $MY_BOOT_DIR/elilo.list"

		textarea_open 120 24
		cat $MY_BOOT_DIR/elilo.list >> $HTML 2>&1
		textarea_close
	else
		raw_open
		line "$MY_BOOT_DIR/elilo.conf is not present on this system."
		raw_close
	fi

else
	raw_open
	line "This is not an EFI system - Skipping ELILO reporting." 
	raw_close
fi

#############=============-----------------................
#
# Kernel Modules
#
#############=============-----------------................

section "section_modules" "Kernel Modules"

item_title "item_lsmod"		"Kernel Modules" "lsmod"
textarea_open 120 24
lsmod >> $HTML 2>&1
textarea_close

item_title "item_modconf"		"Kernel Module Configuration" "cat /etc/modules.conf"
raw_open
if [[ -f /etc/modules.conf ]]
then
	cat /etc/modules.conf >> $HTML 2>&1
else
	line "/etc/modules.conf does not exist on this system."
fi
raw_close

item_title "item_modblist"		"Kernel Module Blacklist" "cat /etc/modprobe.d/blacklist.conf"
raw_open
if [[ -f /etc/modprobe.d/blacklist.conf ]]
then
	cat /etc/modprobe.d/blacklist.conf >> $HTML 2>&1
else
	line "/etc/blacklist.conf does not exist on this system."
fi
raw_close

item_title "item_modinfo"	"Kernel Module Info" "modinfo"
textarea_open 120 24
for EACHMOD in $(lsmod | grep -v Module | awk -F " " '{print $1}')
do
	line ""
	modinfo $EACHMOD >> $HTML 2>&1
done
textarea_close

item_title "item_moddep"	"Module Dependencies" "cat /lib/modules/(kernel)/modules.dep"
textarea_open 120 24
cat /lib/modules/$(uname -r)/modules.dep >> $HTML 2>&1
textarea_close

#############=============-----------------................
#
# Network Configuration
#
#############=============-----------------................

section "section_network_cfg" "Network Configuration"

item_title "item_resolv"		"DNS Resolution" "cat /etc/resolv.conf"
raw_open
cat /etc/resolv.conf >> $HTML 2>&1
raw_close

item_title "item_hosts"		"Local Hosts" "cat /etc/hosts"
raw_open
cat /etc/hosts >> $HTML 2>&1
raw_close

item_title "item_iproute"		"Network routing table via ip route" "ip route"
raw_open
if [ $PUBLIC_REPORT = "yes" ]
then
	line "This is a public report and no routing information is included."
else
	ip route  >> $HTML 2>&1
fi
raw_close

item_title "item_netstat"		"Network routing table via netstat" "netstat"
raw_open
if [ $PUBLIC_REPORT = "yes" ]
then
	line "This is a public report and no routing information is included."
else
	netstat -nr >> $HTML 2>&1
fi
raw_close

item_title "item_firewall"		"Firewall rules" "iptables -L"

textarea_open 120 24
if [ $PUBLIC_REPORT = "yes" ]
then
	line "This is a public report and no firewall information is included."
else
	iptables -L >> $HTML 2>&1
fi
textarea_close

#############=============-----------------................
#
# Storage Configuration
#
#############=============-----------------................

section "section_storage_cfg" "Storage Configuration"

item_title "item_fsblk"		"File System Block Devices" "lsblk -fi"
FILE_EXISTS="no"
check_for_program lsblk
if [[ $FILE_EXISTS == "yes" ]]
then
	textarea_open 160 24
	# -i option uses ASCII characters for tree relationships +--^ etc
	# -f show filesystem information
	lsblk -fi >> $HTML 2>&1
	textarea_close	
fi

item_title "item_fstab" "Filesystem mount table" "fstab"
raw_open
cat /etc/fstab >> $HTML 2>&1
raw_close

item_title "item_mount"		"Mounted filesystems" "mount"
textarea_open 140 24
mount >> $HTML 2>&1
textarea_close

# Enable by default" (most RHEL and Fedora use LVM)
SHOW_LVM="yes"

FILE_EXISTS="no"
check_for_program pvscan
if [[ $FILE_EXISTS == "yes" ]]
then

	PV_RESULTS=$(pvscan 2>&1 | grep "  No matching physical volumes found" | wc -l)

	if [ $PV_RESULTS -ge 1 ]
	then
		SHOW_LVM="no"
	fi
fi

item_title "item_pvscan" "LVM2: Physical Volumes" "pvscan"
raw_open
# Regardless of whether physical volumes were found above, let pvscan
# report the status to the user.  Then use the SHOW_LVM variable set above
# to determine whether volume groups and logical volumes are processed.
#" "Skip those commands if no physical volumes are present)
pvscan >> $HTML 2>&1
raw_close

item_title "item_pvs" "LVM2: Volume Groups" "pvs"
raw_open

if [ $SHOW_LVM == "yes" ]
then
	pvs >> $HTML 2>&1 
else
	line "No physical volumes present per pvscan"
fi
raw_close

item_title "item_vgscan" "LVM2: Volume Groups" "vgscan"
raw_open
if [ $SHOW_LVM == "yes" ]
then
	vgscan >> $HTML 2>&1
else
	line "No physical volumes present per pvscan"
fi
raw_close

item_title "item_vgs" "LVM2: Volume Groups" "vgs"
raw_open
if [ $SHOW_LVM == "yes" ]
then
	vgs >> $HTML 2>&1
else
	line "No physical volumes present per pvscan"
fi
raw_close

item_title "item_lvscan" "LVM2: Logical Volumes" "lvscan"
raw_open
if [ $SHOW_LVM == "yes" ]
then
	lvscan >> $HTML 2>&1
else
	line "No physical volumes present per pvscan"
fi
raw_close

item_title "item_lvs" "LVM2: Logical Volumes" "lvs"
raw_open
if [ $SHOW_LVM == "yes" ]
then
	lvs >> $HTML 2>&1
else
	line "No physical volumes present per pvscan"
fi
raw_close

#############=============-----------------................
#
# Repositories and Installed Packages
#
#############=============-----------------................

section "section_packages" "Repositories and Software Packages"

if [[ $DIST_PACKAGES = "rpm" ]]
then

		###########################################################
		# RPM/YUM Repositories

	item_title "item_rpm_config"		"Software Repositories (rpm/yum)" "cat /etc/yum.conf"

	# Report contents of yum.conf - the yum master configuration file
	textarea_open 120 24
	if [[ -f /etc/yum.conf ]]
	then
		cat /etc/yum.conf >> $HTML 2>&1
	fi
	textarea_close

	# Report contents of individual repositories configured for use with yum
	item_title "item_rpm_repos"		"Yum Repositories" "cat /etc/yum.repos.d/*.repo"
	textarea_open 120 24
	for EACHFILE in /etc/yum.repos.d/*.repo
	do
		line ""
		line "Repository config file: $EACHFILE"
		line "----------"
		cat "$EACHFILE" >> $HTML 2>&1
	done
	textarea_close

	item_title "item_rpm_pkgs"		"Installed RPM Packages" "rpm -qa"

	textarea_open 120 24
	rpm -qa >> $HTML 2>&1
	textarea_close

elif [[ $DIST_PACKAGES = "dpkg" ]]
then

		###########################################################
		# DPKG/APT Repository

	item_title "item_apt_config"		"Software Repositories (dpkg/apt)" "cat /etc/apt/apt.conf"

	textarea_open 120 24
	if [[ -f /etc/apt/apt.conf ]]
	then
		cat /etc/apt/apt.conf >> $HTML 2>&1
	fi
	textarea_close

	# Debian/Ubuntu/etc: Report sources.l
	item_title "item_apt_repos"		"dpkg Repositories" "cat /etc/apt/sources.list"
	if [[ -f /etc/apt/sources.list ]]
	then
		textarea_open 120 24
		EACHFILE="/etc/apt/sources.list"
		line ""
		line "Repository config file: $EACHFILE"
		line "----------"
		cat "$EACHFILE" >> $HTML 2>&1
		textarea_close
	fi

	item_title "item_dpkg_pkgs"	"Debian Packages" "dpkg -l"
	textarea_open 120 24
	dpkg -l >> $HTML 2>&1
	textarea_close

elif [[ $DIST_PACKAGES = "zypper" ]]
then

		###########################################################
		# SuSE Zypper Repository

	item_title "item_zypper_config"		"Software Repositories (SuSE)" "cat /etc/zypp/zypper.conf"

	textarea_open 120 24
	if [[ -f /etc/zypp/zypper.conf ]]
	then
		cat /etc/zypp/zypper.conf >> $HTML 2>&1
	fi
	textarea_close

	# Report contents of individual repositories configured for use with zypper
	item_title "item_zypper_repos"		"Software Repositories (SuSE)" "cat /etc/zypp/
repos.d/*"
	textarea_open 120 24
	for EACHFILE in /etc/zypp/repos.d/*.repo
	do
		line ""
		line "Repository config file: $EACHFILE" 
		line "----------" 
		cat "$EACHFILE" >> $HTML 2>&1
	done
	textarea_close

	item_title "item_zypper_pkgs"	"Zypper Packages" "zypper_packages"
	textarea_open 120 24
	zypper search | grep "i |" >> $HTML 2>&1
	textarea_close
fi

#############=============-----------------................
#
# udev Configuration
#
#############=============-----------------................
toc_section "toc_serial"			"Serial device configuration" "#section_serial"

unordered_list_open

section "section_udev" "udev configuration"

item_title "item_udevconf"	"udev configuration" "cat /etc/udev.conf"
raw_open
if [ -f /etc/udev.conf ]
then
	cat /etc/udev.conf >> $HTML 2>&1
elif [ -f /etc/udev/udev.conf ]
then
	cat /etc/udev/udev.conf >> $HTML 2>&1
fi
raw_close

item_title "item_udevrules"	"udev rules" "cat /etc/udev/rules.d/*"
line
for EACHFILE in /etc/udev/rules.d/*
do
	line "$EACHFILE"
	raw_open
	cat $EACHFILE >> $HTML 2>&1
	raw_close
done

#############=============-----------------................
#
# Serial Device Configuration
#
#############=============-----------------................
toc_section "toc_serial"			"Serial device configuration" "#section_serial"

unordered_list_open

section "section_serial" "Serial device configuration"

item_title "item_serialdmesg"	"Serial log in dmesg" "dmesg | grep tty"
raw_open
# standard serial ports - try to ignore non-serial console tty devices
# This should catch ttyS01 as well as ttyUSB01 and similar
if [[ $(dmesg | grep "tty" | grep -v "tty[0123456789]" | wc -l) -gt 0 ]]
then
	dmesg | grep "tty" | grep -v "tty[0123456789]" >> $HTML 2>&1
fi
raw_close

item_title "item_serialproc"	"Serial devices in /proc" "cat /proc/tty/driver/*"
line
for EACH_SERIAL_TYPE in /proc/tty/driver/*
do
	line "${EACH_SERIAL_TYPE}:" >> $HTML 2>&1
	raw_open
	cat $EACH_SERIAL_TYPE >> $HTML 2>&1
	raw_close
done

item_title "item_setserial"	"Serial devices" "setserial -g ttyS#"
FILE_EXISTS="no"
check_for_program setserial

# Default this flag to no, we haven't seen/processed any ports
SERIAL_PORTS_SEEN="no"

raw_open
# Loop on each type of serial port known
for EACH_SERIAL_PREFIX in S USB
do

	# Loop on first ten serial ports. Haven't more than ten in a long time?
	for EACH_SERIAL_NUMBER in {0..9}
	do

		# Let's set this variable to an actual serial port device name
		EACH_SERIAL_DEVICE="/dev/${EACH_SERIAL_PREFIX}${EACH_SERIAL_NUMBER}"

		if [[ $DEBUG == "yes" ]]
		then
			echo "Serial Scanning $EACH_SERIAL_DEVICE"
		fi
		
		if [[ -c $EACH_SERIAL_DEVICE ]]
		then

			# The presence of UART chips on the computer may cause /dev/ttyS#
			# entries to appear even when actual ports do not exist.
			# If stty fails, then we probably don't have a real port.
			# set serial will still run.
			stty < $EACH_SERIAL_DEVICE > /dev/null 2>&1
			if (( $? == 0 ))
			then

				if [[ $DEBUG == "yes" ]]
				then
					echo "Device $EACH_SERIAL_DEVICE is present."
				fi
	
				# If the setserial program is installed, then execute it
				if [[ $FILE_EXISTS == "yes" ]]
				then

					# setserial is really about serial port UART chips and
					# does not like USB based serial ports
					if [[ ${EACH_SERIAL_DEVICE:1:6} != "ttyUSB" ]]
					then

						line "setserial $EACH_SERIAL_DEVICE"

						setserial -a $EACH_SERIAL_DEVICE >> $HTML 2>&1
					fi

				else
					echo "'setserial' is not installed." >> $HTML 2>&1
				fi

				line
				line "stty $EACH_SERIAL_DEVICE"
				stty -a < $EACH_SERIAL_DEVICE >> $HTML 2>&1

				# Now that we've seen/processed a port, set the seen to yes
				SERIAL_PORTS_SEEN="yes"

			fi # endif - can we execute stty on the serial port?


		fi # endif - do we have a serial port device in /dev/ ?
	done # loop - process serial ports by number 0..9
done # loop - process serial port prefixes 'S' and 'USB'

# If we haven't seen any serial ports, report it cleanly to the user
if [[ $SERIAL_PORTS_SEEN == "no" ]]
then
	line "There are no serial ports on this system."
fi

raw_close

#############=============-----------------................
#
# X-Windows Graphics
#
#############=============-----------------................

section "section_xwindows" "X-Windows"

# Nice idea, but we can't attach to another X display.. yet?

# Default to skip - assume we're on a non graphical system
MY_XDISPLAY=""

# If the user has specified an X display to report on, use that.
if [[ $DEF_XDISPLAY != "null" ]]
then
	MY_XDISPLAY="-display $DEF_XDISPLAY"
else 

	# User hasn't specified a particular X display to use.

	# Is this script running within one?
	if [[ $DISPLAY != "" ]]
	then

		# Empty out MY_XDISPLAY so clients just use the env $DISPLAY setting
		MY_XDISPLAY=""
	else
		MY_XDISPLAY="skip"
	fi
fi

if [[ $DEBUG = "yes" ]]
then
	echo "X-Windows: DISPLAY $DISPLAY"
	echo "X-Windows: DEF_XDISPLAY $DEF_XDISPLAY"
	echo "X-Windows: MY_XDISPLAY $MY_XDISPLAY"
fi

item_title "item_xrandr"	"RandR - X Resize, Rotate and Reflect Extension" "xrandr"

raw_open
if [[ $MY_XDISPLAY != "skip" ]]
then
	xrandr $MY_XDISPLAY >> $HTML 2>&1 
else
	line "No X Display is available for reporting."
fi
raw_close

item_title "item_dpyinfo"	"X Display Info" "xdpyinfo"

textarea_open 120 24
if [[ $MY_XDISPLAY != "skip" ]]
then
	xdpyinfo $MY_DISPLAY >> $HTML 2>&1 
else
	line "No X Display is available for reporting."
fi
textarea_close

item_title "item_xvinfo"	"Xvideo info" "xvinfo"

textarea_open 120 24
if [[ $MY_XDISPLAY != "skip" ]]
then
	xvinfo $MY_XDISPLAY >> $HTML 2>&1 
else
	line "No X Display is available for reporting."
fi
textarea_close

item_title "item_glxinfo"	"GLX Info" "glxinfo"

textarea_open 120 24
if [[ $MY_XDISPLAY != "skip" ]]
then
	glxinfo $MY_XDISPLAY >> $HTML 2>&1
else
	line "No X Display is available for reporting."
fi
textarea_close


#############=============-----------------................
#
# Hardware Summary - 
#
#############=============-----------------................

section "section_hw_summary" "Hardware Summary"

#item_title "item_product"		"Product Name (dmidecode -s system-product-name)"
item_title "item_product"		"Product Name" "dmidecode -s system-product-name"
raw_open
dmidecode -s system-product-name >> $HTML 2>&1
raw_close

item_title "item_processor_line"	"Processor Summary" "dmidecode -s processor-version"
raw_open
dmidecode -s processor-version | head -1 >> $HTML 2>&1
raw_close

item_title "item_memsum"			"Memory" "/proc/meminfo" 
raw_open
cat /proc/meminfo | grep MemTotal >> $HTML 2>&1
raw_close

item_title "item_bios_vendor"	"BIOS Vendor" "dmidecode -s bios-vendor"
raw_open
dmidecode -s bios-vendor >> $HTML 2>&1
raw_close

item_title "item_bios_vers"		"BIOS Version" "dmidecode -s bios-version"
raw_open
dmidecode -s bios-version  >> $HTML 2>&1
raw_close

item_title "item_bios_date"		"BIOS Release Date" "dmidecode -s bios-release-date"
raw_open
dmidecode -s bios-release-date  >> $HTML 2>&1
raw_close

item_title "item_lsinitrd" 		"initrd information" "lsinitrd"

if [[ $DIST_NAME == "suse" ]]
then
	MY_KERNEL=$(uname -a | cut --delimiter=" " -f 3)
	MY_INITRD="/boot/initrd-$MY_KERNEL"
fi

FILE_EXISTS="no"
check_for_program lsinitrd
if [[ $FILE_EXISTS == "yes" ]]
then
	# Present the lsinitrd information in an HTML textarea box
	textarea_open 120 24
	if [[ $DIST_NAME == "suse" ]]
	then
		lsinitrd -l $MY_INITRD >> $HTML 2>&1
	else
		lsinitrd >> $HTML 2>&1
	fi
	textarea_close

	# Send the raw output to an ASCII file
	if [[ $DIST_NAME == "suse" ]]
	then
		lsinitrd -l $MY_INITRD >> $FILE_INITRD 2>&1
	else
		lsinitrd >> $FILE_INITRD 2>&1
	fi

	helpful_tip "Detailed information is available in the <a href=file:$BASE_FILE_INITRD target=_file_initrd>separate lsinitrd file.</a>"
else
	echo "lsinitrd is not present on this system." >> $HTML 2>&1
fi

#############=============-----------------................
#
# Processor/CPU Details
#
#############=============-----------------................

section "section_processor" "Processor Information"

item_title "item_proc_family"	"Processor Family" "dmidecode -s processor-family"
# first line only please
raw_open
dmidecode -s processor-family | head -1 >> $HTML 2>&1
raw_close

item_title "item_proc_vers"		"Processor Version" "dmidecode -s processor-version"
# first line only please
raw_open
dmidecode -s processor-version | head -1 >> $HTML 2>&1
raw_close

item_title "item_proc_count"		"Processor Count" ""
raw_open
line "$(cat /proc/cpuinfo | grep processor | wc -l) count of $(grep 'model name' /proc/cpuinfo | head -1 | cut -c 14-80) logical CPUs"
raw_close

item_title "item_processor_lscpu" "Processor Details" "lscpu"
raw_open
FILE_EXISTS="no"
check_for_program lscpu
if [[ $FILE_EXISTS == "yes" ]]
then
	lscpu >> $HTML 2>&1
else
	line "lscpu is not installed on this system." 
fi
raw_close

item_title "item_processor_lscpue" "Processor List " "lscpu -e"
raw_open
FILE_EXISTS="no"
check_for_program lscpu
if [[ $FILE_EXISTS == "yes" ]]
then
	# If QUIRK_LSCPU = "noext" then we don't have the -e (extended) option
	if [[ $QUIRK_LSCPU != "noext" ]]
	then
		lscpu -e >> $HTML 2>&1
	else
		# QUIRK: Ubuntu, LinuxMint
		line "QUIRK: 'lscpu -e' is not available with this distribution."
	fi
else
	line "lscpu is not installed on this system."
fi
raw_close

item_title "item_processor_over"	"First Processor" "cat proc/cpuinfo"
raw_open

# Do we have more than one CPU?
if [[ $(grep processor /proc/cpuinfo | wc -l ) -gt 1 ]]
then

	# more than one CPU

	ENDLINE=$(grep -n processor /proc/cpuinfo  | grep ": 1$" | cut -f 1 --delimiter=":")

	# calculate how many lines to just show the first's detail
	FIRSTCPU=$(expr $ENDLINE - 1)

	# Show /proc/cpuinfo for first cpu only
	cat /proc/cpuinfo | head --lines $FIRSTCPU >> $HTML 2>&1
else
	# only one CPU, just cat /proc/cpuinfo to show detail for the chip we're using.
	cat /proc/cpuinfo >> $HTML 2>&1
fi

raw_close

cat /proc/cpuinfo >> $FILE_CPU

helpful_tip "<strong>Tip:</strong> Detailed information is available in the <a href=file:$BASE_FILE_CPU target=_file_cpu>separate cpu info file.</a>"

item_title "item_buddyinfo"		"Buddy Memory" "cat /proc/buddyinfo"

raw_open
	cat /proc/buddyinfo >> $HTML 2>&1
raw_close 

item_title "item_meminfo"		"Memory Info" "cat /proc/meminfo"
raw_open
cat /proc/meminfo >> $HTML 2>&1
raw_close

item_title "item_freemem"		"Free Memory" "free --giga"
raw_open
if [ $(free -V | grep procps-ng | wc -l) -gt 0 ]
then
	free --human >> $HTML 2>&1
else
	free -m >> $HTML 2>&1
fi
raw_close

item_title "item_mtrr"			"MTRR" "cat /proc/mtrr"
raw_open
cat /proc/mtrr >> $HTML 2>&1
raw_close

item_title "item_numashow"		"NUMA Topology" "numactl --show"

raw_open
FILE_EXISTS="no"
check_for_program numactl
if [[ $FILE_EXISTS == "yes" ]]
then
	numactl --show >> $HTML 2>&1
else
	paragraph "numactl is not installed."
fi
raw_close 

helpful_tip "<strong>Tip:</strong> 'numactl --show' describes the NUMA policies for the current process.  It can be useful to see how physical CPUs and memory are organized."

item_title "item_numahw"			"NUMA Memory Topology" "numactl --hardware"
raw_open
FILE_EXISTS="no"
check_for_program numactl
if [[ $FILE_EXISTS == "yes" ]]
then
	numactl --hardware >> $HTML 2>&1
else
	paragraph "numactl is not installed."
fi
raw_close

helpful_tip "<p><strong>Tip:</strong> 'numactl --hardware' lists each node in the NUMA domain and produces table showing the cost of memory access from one node to another node."

#############=============-----------------................
#
# Interrupt Details
#
#############=============-----------------................

section "section_inter" "Interrupts" "cat /proc/interrupts"
textarea_open 120 24
cat /proc/interrupts >> $HTML 2>&1
textarea_close

helpful_tip "Detailed information is available in the <a href=file:$BASE_FILE_INTER target=_file_inter>separate interrupts info file.</a><br>" >> $HTML 2>&1

cat /proc/interrupts >> $FILE_INTER

#############=============-----------------................
#
# PCI Expansion Bus & Card Details
#
#############=============-----------------................

section "section_pci" "Expansion Cards"
 
#item_title "item_cards"			"Expansion cards" "sutl cards"

#raw_open
#FILE_EXISTS="no"
#check_for_program sutl
#if [[ $FILE_EXISTS == "yes" ]]
#then
#	sutl cards >> $HTML 2>&1
#else
#	line "'sutl' utility not installed, cannot execute 'sutl cards'" 
#fi
#raw_close

item_title "item_iomem"			"Peripheral IO memory" "cat /proc/iomem"
textarea_open 120 24
cat /proc/iomem >> $HTML 2>&1 
textarea_close

item_title "item_ioports"		"Peripheral IO ports" "cat /proc/ioports"
textarea_open 120 24
cat /proc/ioports >> $HTML 2>&1
textarea_close

item_title "item_dma"		"Peripheral DMA" "cat /proc/dma"
# Show a short raw box if we only have a few lines, textarea if many
if [[ $(cat /proc/dma | wc -l) -le 15 ]]
then
	raw_open
	cat /proc/dma >> $HTML 2>&1
	raw_close
else
	textarea_open 120 24
	cat /proc/dma >> $HTML 2>&1
	textarea_close
fi

item_title "item_devices" 		"Devices" "cat /proc/devices"
# Show a short raw box if we only have a few lines, textarea if many
if [[ $(cat /proc/devices | wc -l) -le 15 ]]
then
	raw_open
	cat /proc/devices >> $HTML 2>&1
	raw_close
else
	textarea_open 120 24
	cat /proc/devices >> $HTML 2>&1
	textarea_close
fi

item_title "item_lspci"			"PCI devices" "lspci"
textarea_open 120 24
lspci >> $HTML 2>&1 
textarea_close

item_title "item_lspcivv"		"PCI Devices Detail" "lspci -vv"
textarea_open 120 24
lspci -vv >> $HTML 2>&1 
lspci -vv >> $FILE_PCI 2>&1
textarea_close

helpful_tip "Detailed information is available in the <a href=file:$BASE_FILE_PCI target=_file_pci>separate lspci file.</a>"

#############=============-----------------................
#
# USB System Details
#
#############=============-----------------................

section "section_usb" "USB System"

item_title "item_lsusb"			"USB Devices" "lsusb"
raw_open
lsusb >> $HTML 2>&1
raw_close

item_title "item_lsusbpy"		"USB Devices Speed & Power" "lsusb.py"
raw_open
#FILE_EXISTS="no"
#check_for_program lsusb.py
#if [[ $FILE_EXISTS == "yes" ]]
# check_for_program doesn't work with programs that have extensions
if [[ -f /usr/bin/lsusb.py ]]
then
	/usr/bin/lsusb.py >> $HTML 2>&1
else
	line "/usr/bin/lsusb.py is not installed."
fi
raw_close

item_title "item_lsusbv"			"USB Devices Detail" "lsusb -v"
textarea_open 120 24
lsusb -v >> $HTML 2>&1
textarea_close

item_title "item_lsusbt"			"USB Devices Tree" "lsusb -t"
# redirect stderr to stdout as some information is sent do stderr too, not sure why.
raw_open
lsusb -t >> $HTML 2>&1
raw_close

#############=============-----------------................
#
# System Board Details with dmidecode
#
#############=============-----------------................

section "section_dmidecode" "System Board Information"

item_title "item_dmidecode" "System Board information" "dmidecode"

textarea_open 120 24
dmidecode >> $HTML 2>&1
textarea_close 

dmidecode >> $FILE_DMI

helpful_tip "Detailed information is available in the <a href=file:$BASE_FILE_DMI target=_file_dmi>separate dmidecode file.</a>"

#############=============-----------------................
#
# Network Devices
#
#############=============-----------------................

section "section_network_devices" "Network Devices"

#item_title "item_sutlnics"		"Network cards" "sutl nics"
#FILE_EXISTS="no"
#check_for_program sutl
#raw_open
#if [[ $FILE_EXISTS == "yes" ]]
#then
#	sutl nics >> $HTML 2>&1
#else
#	line "# not installed: sutl nics"
#fi
#raw_close

#item_title "item_nicinfo"		"Network port information" "nic-info"
#FILE_EXISTS="no"
#check_for_program nic-info
#raw_open
#if [[ $FILE_EXISTS == "yes" ]]
#then
#	if [ $PUBLIC_REPORT = "yes" ]
#	then
#		line "This is a public report and no IP network information is included."
#	else
#		nic-info >> $HTML 2>&1
#	fi
#else
#	line "'nic-info' utility not installed, can't execute 'nic-info'" 
#fi
#raw_close

item_title "item_nicports"		"Network port detail information" "ifconfig, ethtool, ethtool -i"
# process each ethernet device, skip vpn, bridges, localhost

if [ $PUBLIC_REPORT = "yes" ]
then
	raw_open
	line "This is a public report and no IP network information is included."
	raw_close
else

	# QUIRK: handling of network device names in Fedora like em1, p10p1, etc
	if	( [[ $DIST_NAME="fedora" ]] && [[ $DIST_RELEASE = "18" ]] ) ||
			( [[ $DIST_NAME="fedora" ]] && [[ $DIST_RELEASE = "19" ]] )
	then
		# FEDORA 18-19
		NIC_LIST=$(ifconfig -a | fgrep " mtu " | grep -v lo | grep -v virbr | grep -v vboxnet | grep -v tap | awk -F " " '{print $1}')
	else
		# ALL OTHERS
		NIC_LIST=$(ifconfig -a | fgrep " HWaddr " | grep -v lo | grep -v virbr | grep -v vboxnet | grep -v tap | awk -F " " '{print $1}')
	fi

		# Report on each network device port discovered and placed in NIC_LIST
		for EACHNIC in $NIC_LIST
		do
			# Do raw_open/raw_close for each NIC so each is presented individually
			raw_open

			#FILE_EXISTS="no"
			#check_for_program sutl
			#line "<strong>"
			#if [[ $FILE_EXISTS == "yes" ]]
			#then
			#	sutl nics | grep $EACHNIC >> $HTML 2>&1
			#else
			#	line "Network device: $EACHNIC"
			#fi
			#line "</strong>"

			line "" 
			line "# ifconfig $EACHNIC"
			ifconfig $EACHNIC >> $HTML 2>&1

			FILE_EXISTS="no"
			check_for_program ethtool
			if [[ $FILE_EXISTS == "yes" ]]
			then
				line "# ethtool $EACHNIC"
				ethtool $EACHNIC >> $HTML 2>&1

				line "# ethtool -i $EACHNIC"
				ethtool -i $EACHNIC >> $HTML 2>&1
			else
				line "ethtool is not available" >> $HTML 2>&1
			fi

			# Do raw_open/raw_close for each NIC so each is presented individually
			raw_close

		done # on to next nic port in NIC_LIST

fi
raw_close

#############=============-----------------................
#
# Storage Resources
#
#############=============-----------------................

section "section_storage" "Storage Devices"

#item_title "item_sutlhbas"	"Host Bus Adapter information" "sutl hbas"
#FILE_EXISTS="no"
#check_for_program sutl
#if [[ $FILE_EXISTS == "yes" ]]
#then
#	raw_open
#	sutl hbas >> $HTML 2>&1
#	raw_close
#else
#	line "'sutl' utility not installed, can't execute 'sutl cards'" 
#fi

item_title "item_lsblk"		"Block Storage Devices" "lsblk"
FILE_EXISTS="no"
check_for_program lsblk
if [[ $FILE_EXISTS == "yes" ]]
then
	textarea_open 120 24
	# -i option uses ASCII characters for tree relationships +--^ etc
	lsblk -i >> $HTML 2>&1
	textarea_close	
fi

item_title "item_lsscsi"		"SCSI Information" "lsscsi"
raw_open
FILE_EXISTS="no"
check_for_program lsscsi
if [[ $FILE_EXISTS == "yes" ]]
then
	lsscsi >> $HTML 2>&1
else
	line "lsscsi is not installed on this system."
fi
raw_close

item_title "item_procscsi" "SCSI Information via proc" "cat /proc/scsi/scsi"
textarea_open 120 24
cat /proc/scsi/scsi >> $HTML 2>&1
textarea_close

#############=============-----------------................
#
# Peripherals - General, Not Included Elsewhere
#
#############=============-----------------................

section "section_periphs" "Peripherals"

item_title "item_cdinfo" "DVD/CD Drive Info" "cd-info"
# quirk: SLES 11 SP3 - no cd-info by default
FILE_EXISTS="no"
check_for_program cd-info
if [[ $FILE_EXISTS == "yes" ]]
then
	textarea_open 120 24
	cd-info >> $HTML 2>&1
	textarea_close
else
	raw_open
	line "cd-info is not available on this system"
	raw_close
fi

#############=============-----------------................
#
# Virtualization
#
#############=============-----------------................

section "section_virt" "Virtualization"

if [[ $DEF_SHOW_VIRT == "yes" ]]
then

	FILE_EXISTS="no"
	check_for_program virsh
	if [[ $FILE_EXISTS == "yes" ]]
	then
		item_title "item_kvminfo" "KVM Version" "modinfo kvm"
		raw_open
		modinfo kvm>> $HTML 2>&1
		raw_close

		item_title "item_kvmhwinfo" "KVM Hardware Version" "modinfo kvm_intel | modinfo kvm_amd"
		raw_open
		if [ $(lsmod | grep kvm_intel | wc -l) -gt 0 ]
		then
			modinfo kvm_intel >> $HTML 2>&1
		fi
		if [ $(lsmod | grep kvm_amd | wc -l) -gt 0 ]
		then
			modinfo kvm_amd >> $HTML 2>&1
		fi
		raw_close

		item_title "item_virshvers"	"Virtualization version" "virsh version"
		raw_open
		virsh version >> $HTML 2>&1
		raw_close
	
		item_title "item_virshnodeinfo"	"Virtualization nodes" "virsh nodeinfo"
		raw_open
		virsh nodeinfo >> $HTML 2>&1
		raw_close
	
		item_title "item_virshnodecpu"	"Virtualization nodes" "virsh nodecpustats"
		raw_open
		if [[ $MY_FAMILY == "redhat" ]] && [[ $DIST_RELEASE == "5" ]]
		then
			line "virsh nodecpustats is not available with this distribution and release"
		else
			virsh nodecpustats >> $HTML 2>&1
		fi
		raw_close

		item_title "item_virshnodemem"	"Virtualization nodes" "virsh nodeinfo"
		raw_open
		if [[ $MY_FAMILY == "redhat" ]] && [[ $DIST_RELEASE == "5" ]]
		then
			line "virsh nodememstats is not available with this distribution and release"
		else
			virsh nodememstats >> $HTML 2>&1 
		fi
		raw_close

		item_title "item_virshnodedevlist"	"Virtualization nodes devices" "virsh nodedev-list"
		textarea_open 120 24
		virsh nodedev-list>> $HTML 2>&1
		textarea_close

		item_title "item_virshnodedevxml"	"Virtualization nodes devices xml" "virsh nodedev-dumpxml"
		textarea_open 120 24
		for EACHDEV	in $(virsh nodedev-list)
		do	
			virsh nodedev-dumpxml $EACHDEV >> $HTML 2>&1
		done
		textarea_close

		item_title "item_virsh_iflist" "Virtualization Interface List" "virsh iface-list"
		raw_open
		virsh iface-list >> $HTML 2>&1
		raw_close

		item_title "item_virsh_netlist" "Virtualization Network List" "virsh net-list"
		raw_open
		virsh net-list >> $HTML 2>&1
		raw_close

	else
		line "virsh is not installed in this environment."
	fi
else
	echo "Skipping Virtualization Configuration (--novirt)"
	raw_open
	line "Skipping Virtualization Configuration (--novirt)"
	raw_close
fi # If DEF_SHOW_VIRT is yes, show this section.

#############=============-----------------................
#
# Virtual Machines
#
#############=============-----------------................

section "section_vms" "Virtual Machines"

if [[ $DEF_SHOW_VIRT == "yes" ]]
then

	FILE_EXISTS="no"
	check_for_program virsh
	if [[ $FILE_EXISTS == "yes" ]]
	then
		item_title "item_vmlist"	"Virtual Machines Defined" "virsh list --all"
		raw_open
		virsh list --all >> $HTML 2>&1
		raw_close

		item_title "item_virsh_pool_list" "Virtualization Storage Pool List" "virsh pool-list"
		raw_open
		virsh pool-list >> $HTML 2>&1
		raw_close

		item_title "item_virsh_pool_info" "Virtualization Storage Pool Info" "virsh pool-info"
		raw_open
		for EACH_POOL in $(virsh pool-list | tail -n +3 | awk '{ FS = " "; print $1 }')
		do
			line "<strong>Pool info for $EACH_POOL</strong>"
			line ""
			virsh pool-info $EACH_POOL >> $HTML 2>&1
		done
		raw_close

		item_title "item_virsh_vol_list" "Virtualization Storage Volume List" "virsh vol-list"
		raw_open
		for EACH_POOL in $(virsh pool-list | tail -n +3 | awk '{ FS = " "; print $1 }' | sed 's/ *$//')
		do
			line "<strong>Volumes in storage pool $EACH_POOL</strong>"
			line ""
			virsh vol-list $EACH_POOL >> $HTML 2>&1
		done
		raw_close

		item_title "item_virsh_vol_info" "Virtualization Storage Volume Info" "virsh vol-info"
		raw_open
		for EACH_POOL in $(virsh pool-list | tail -n +3 | awk '{ FS = " "; print $1 }' | sed 's/ *$//')
		do
			line "<strong>Volumes in storage pool $EACH_POOL</strong>"
			line ""

			for EACH_VOL in $(virsh vol-list $EACH_POOL | tail -n +3 | awk '{ FS = " "; print $1 }' | sed 's/ *$//')
			do
				line "<strong>Volume info for $EACH_VOL in storage pool $EACH_POOL</strong>"
				line ""
				virsh vol-info --pool $EACH_POOL $EACH_VOL >> $HTML 2>&1
			done

		done
		raw_close

		item_title "item_vm_details" "Virtual Machine Details" "--"
		for EACH_VM in $(virsh list --all | tail -n +3 | awk '{ FS = " "; print $2 }' | sed 's/ *$//')
		do

			raw_open
			# Determine the state of the VM: Running, Shut offf

			QUIRK_VIRSH_DOMSTATE="no-reason"

			# Acquire the state of the VM and a possible reason for its state
			# If Quirk_virsh_domstate is set, we don't have the -reason feature
			if [[ $QUIRK_VIRSH_DOMSTATE == "no-reason" ]]
			then
				VM_STATE=$(virsh domstate $EACH_VM)
			else
				VM_STATE=$(virsh domstate $EACH_VM --reason)
			fi

			# Report the name of the VM and its current state
			line "<strong>Virtual Machine $EACH_VM is $VM_STATE</strong>"
			line ""

			# Try to acquire the description of this VM
			if [[ QUIRK_VIRSH_DESC != "no-desc" ]]
			then
				VM_DESC=$(virsh desc $EACH_VM)


				# If the VM has something other than "No description" then report it.
				if [[ ${VM_DESC:1:14} != "No description" ]]
				then
					# Report the VM description text
					line "$VM_DESC"
					line ""
				fi
			fi

			# Report technical information on the VM like its ID, UUID, Memory, CPU
			virsh dominfo $EACH_VM >> $HTML 2>&1

			# Report storage devices defined for the VM
			line "Defined storage devices:"
			line ""
			virsh domblklist $EACH_VM >> $HTML 2>&1

			# Report network interfaces defined for the VM
			line "Defined network interfaces:"
			line ""
			virsh domiflist $EACH_VM >> $HTML 2>&1

			raw_close

		done

		line
		
	else
		line "virsh is not installed in this environment."
	fi

else
	echo "Skipping Virtual Machines (--novirt)"
	raw_open
	line "Skipping Virtual Machines (--novirt)"
	raw_close
fi # If DEF_SHOW_VIRT is yes, show this section.

#############=============-----------------................
#
# XEN Virtualization
#
#############=============-----------------................

section "section_xen" "Xen Virtualization"

if [[ $DEF_SHOW_VIRT == "yes" ]]
then

	item_title "item_xenconfig" "Xen Configuration" "cat /etc/xen/xend-config.sxp"

else

	echo "Skipping Xen Virtualization (--novirt)"
	raw_open
	line "Skipping Xen Virtualization (--novirt)"
	raw_close

fi # If DEF_SHOW_VIRT is yes, show this section.

#############=============-----------------................
#
# End Of Report - Complete and Process Output Files
#
#############=============-----------------................

line "</body></html>" >> $HTML 2>&1

# if we see an existing file, remove it so we can replace it.
if [ -f $OUTPUT_DIR.tar ]
then
	rm $OUTPUT_DIR.tar
fi
# if we see an existing file, remove it so we can replace it.
if [ -f $OUTPUT_DIR.tar.gz ]
then
	rm $OUTPUT_DIR.tar.gz
fi

echo -e "\nTaring up results."
tar cf $OUTPUT_DIR.tar $OUTPUT_DIR

echo "Compressing tar file."
gzip -9 $OUTPUT_DIR.tar

FILE_EXISTS="no"
check_for_program zip
if [[ $FILE_EXISTS == "yes" ]]
then
	zip -qrl $OUTPUT_DIR.zip $OUTPUT_DIR
fi

echo -e "Birdseye capture complete: $OUTPUT_DIR.tar.gz\n"
